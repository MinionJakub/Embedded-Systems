
zadanie4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000940  000009d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011e  0080011e  000009f2  2**0
                  ALLOC
  3 .stab         000014d0  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fc8  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ea0  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 33       	cpi	r26, 0x32	; 50
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  9e:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
    // czekaj aż transmiter gotowy
    while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
    UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
    // czekaj aż znak dostępny
    while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
    return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    // wyczyść rejestr UCSR0A
    UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e4:	08 95       	ret

000000e6 <spi_slave_init>:

// inicjalizacja SPI
void spi_slave_init()
{
    // ustaw pin MISO jako wyjście
    DDRB |= _BV(MISO);
  e6:	24 9a       	sbi	0x04, 4	; 4
    // włącz SPI w trybie slave z zegarem 125 kHz
    SPCR = _BV(SPE);
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	8c bd       	out	0x2c, r24	; 44
  ec:	08 95       	ret

000000ee <spi_master_init>:
}

void spi_master_init()
{
    DDRD |= _BV(MOSI) | _BV(SCK) | _BV(SS);
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	80 6e       	ori	r24, 0xE0	; 224
  f2:	8a b9       	out	0x0a, r24	; 10
    PORTD |= _BV(SS);
  f4:	5e 9a       	sbi	0x0b, 6	; 11
  f6:	08 95       	ret

000000f8 <spi_receive>:
    // czekaj na ukończenie transmisji
    // while (!(SPSR & _BV(SPIF))); //czekanie jest opcjonalne
    // wyczyść flagę przerwania
    // SPSR |= _BV(SPIF); //czyszczenie bitu przerwania jest opcjonalne
    // zwróć otrzymane dane
    return SPDR;
  f8:	8e b5       	in	r24, 0x2e	; 46
}
  fa:	08 95       	ret

000000fc <spi_transmit>:

void spi_transmit(uint8_t data)
{
    PORTD &= ~_BV(SS);
  fc:	5e 98       	cbi	0x0b, 6	; 11
    PORTD &= ~_BV(SCK);
  fe:	5f 98       	cbi	0x0b, 7	; 11
 100:	28 2f       	mov	r18, r24
 102:	30 e0       	ldi	r19, 0x00	; 0
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 104:	a9 01       	movw	r20, r18
 106:	44 0f       	add	r20, r20
 108:	45 2f       	mov	r20, r21
 10a:	44 1f       	adc	r20, r20
 10c:	55 0b       	sbc	r21, r21
 10e:	45 2b       	or	r20, r21
 110:	49 f5       	brne	.+82     	; 0x164 <spi_transmit+0x68>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 112:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 114:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 116:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 118:	26 fd       	sbrc	r18, 6
 11a:	29 c0       	rjmp	.+82     	; 0x16e <spi_transmit+0x72>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 11c:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 11e:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 120:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 122:	25 fd       	sbrc	r18, 5
 124:	29 c0       	rjmp	.+82     	; 0x178 <spi_transmit+0x7c>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 126:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 128:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 12a:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 12c:	24 fd       	sbrc	r18, 4
 12e:	29 c0       	rjmp	.+82     	; 0x182 <spi_transmit+0x86>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 130:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 132:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 134:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 136:	23 fd       	sbrc	r18, 3
 138:	29 c0       	rjmp	.+82     	; 0x18c <spi_transmit+0x90>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 13a:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 13c:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 13e:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 140:	22 fd       	sbrc	r18, 2
 142:	29 c0       	rjmp	.+82     	; 0x196 <spi_transmit+0x9a>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 144:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 146:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 148:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 14a:	21 fd       	sbrc	r18, 1
 14c:	29 c0       	rjmp	.+82     	; 0x1a0 <spi_transmit+0xa4>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 14e:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 150:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 152:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 154:	80 ff       	sbrs	r24, 0
 156:	29 c0       	rjmp	.+82     	; 0x1aa <spi_transmit+0xae>
        {
            PORTD |= _BV(MOSI);
 158:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 15a:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 15c:	5f 98       	cbi	0x0b, 7	; 11
    }
    PORTD |= _BV(SCK);
 15e:	5f 9a       	sbi	0x0b, 7	; 11
    PORTD |= _BV(SS);
 160:	5e 9a       	sbi	0x0b, 6	; 11
 162:	08 95       	ret
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
        {
            PORTD |= _BV(MOSI);
 164:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 166:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 168:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 16a:	26 ff       	sbrs	r18, 6
 16c:	d7 cf       	rjmp	.-82     	; 0x11c <spi_transmit+0x20>
        {
            PORTD |= _BV(MOSI);
 16e:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 170:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 172:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 174:	25 ff       	sbrs	r18, 5
 176:	d7 cf       	rjmp	.-82     	; 0x126 <spi_transmit+0x2a>
        {
            PORTD |= _BV(MOSI);
 178:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 17a:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 17c:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 17e:	24 ff       	sbrs	r18, 4
 180:	d7 cf       	rjmp	.-82     	; 0x130 <spi_transmit+0x34>
        {
            PORTD |= _BV(MOSI);
 182:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 184:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 186:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 188:	23 ff       	sbrs	r18, 3
 18a:	d7 cf       	rjmp	.-82     	; 0x13a <spi_transmit+0x3e>
        {
            PORTD |= _BV(MOSI);
 18c:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 18e:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 190:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 192:	22 ff       	sbrs	r18, 2
 194:	d7 cf       	rjmp	.-82     	; 0x144 <spi_transmit+0x48>
        {
            PORTD |= _BV(MOSI);
 196:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 198:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 19a:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 19c:	21 ff       	sbrs	r18, 1
 19e:	d7 cf       	rjmp	.-82     	; 0x14e <spi_transmit+0x52>
        {
            PORTD |= _BV(MOSI);
 1a0:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 1a2:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 1a4:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 1a6:	80 fd       	sbrc	r24, 0
 1a8:	d7 cf       	rjmp	.-82     	; 0x158 <spi_transmit+0x5c>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 1aa:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 1ac:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 1ae:	5f 98       	cbi	0x0b, 7	; 11
    }
    PORTD |= _BV(SCK);
 1b0:	5f 9a       	sbi	0x0b, 7	; 11
    PORTD |= _BV(SS);
 1b2:	5e 9a       	sbi	0x0b, 6	; 11
 1b4:	08 95       	ret

000001b6 <i2cInit>:
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
 1b6:	80 e2       	ldi	r24, 0x20	; 32
 1b8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
 1bc:	ec eb       	ldi	r30, 0xBC	; 188
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	80 83       	st	Z, r24
 1c6:	08 95       	ret

000001c8 <i2cWaitForComplete>:
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 1c8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1cc:	87 ff       	sbrs	r24, 7
 1ce:	fc cf       	rjmp	.-8      	; 0x1c8 <i2cWaitForComplete>
}
 1d0:	08 95       	ret

000001d2 <i2cStart>:
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 1d2:	84 ea       	ldi	r24, 0xA4	; 164
 1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 1d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1dc:	87 ff       	sbrs	r24, 7
 1de:	fc cf       	rjmp	.-8      	; 0x1d8 <i2cStart+0x6>
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
 1e0:	08 95       	ret

000001e2 <i2cStop>:
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 1e2:	84 e9       	ldi	r24, 0x94	; 148
 1e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1e8:	08 95       	ret

000001ea <i2cReset>:
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 1ea:	80 e9       	ldi	r24, 0x90	; 144
 1ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f0:	08 95       	ret

000001f2 <i2cReadAck>:
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 1f2:	84 ec       	ldi	r24, 0xC4	; 196
 1f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 1f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fc:	87 ff       	sbrs	r24, 7
 1fe:	fc cf       	rjmp	.-8      	; 0x1f8 <i2cReadAck+0x6>
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  i2cWaitForComplete();
  return TWDR;
 200:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 204:	08 95       	ret

00000206 <i2cReadNoAck>:
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
 206:	84 e8       	ldi	r24, 0x84	; 132
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 20c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 210:	87 ff       	sbrs	r24, 7
 212:	fc cf       	rjmp	.-8      	; 0x20c <i2cReadNoAck+0x6>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
 214:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 218:	08 95       	ret

0000021a <i2cSend>:
 21a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 21e:	84 e8       	ldi	r24, 0x84	; 132
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	87 ff       	sbrs	r24, 7
 22a:	fc cf       	rjmp	.-8      	; 0x224 <i2cSend+0xa>
 22c:	08 95       	ret

0000022e <main>:

// inicjalizacja UART
void uart_init()
{
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
 22e:	87 e6       	ldi	r24, 0x67	; 103
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 236:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    // wyczyść rejestr UCSR0A
    UCSR0A = 0;
 23a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 23e:	88 e1       	ldi	r24, 0x18	; 24
 240:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
int main()
{
    // zainicjalizuj UART
    uart_init();
    // skonfiguruj strumienie wejścia/wyjścia
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 24a:	8e e1       	ldi	r24, 0x1E	; 30
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	23 e5       	ldi	r18, 0x53	; 83
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <__data_end+0x9>
 256:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <__data_end+0x8>
 25a:	2c e5       	ldi	r18, 0x5C	; 92
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <__data_end+0xb>
 262:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__data_end+0xa>
 266:	23 e0       	ldi	r18, 0x03	; 3
 268:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__data_end+0x3>
 26c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0xd>
 270:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end+0xc>
    stdin = stdout = stderr = &uart_file;
 274:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <__iob+0x5>
 278:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__iob+0x4>
 27c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__iob+0x3>
 280:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__iob+0x2>
 284:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__iob+0x1>
 288:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__iob>

// inicjalizacja SPI
void spi_slave_init()
{
    // ustaw pin MISO jako wyjście
    DDRB |= _BV(MISO);
 28c:	24 9a       	sbi	0x04, 4	; 4
    // włącz SPI w trybie slave z zegarem 125 kHz
    SPCR = _BV(SPE);
 28e:	80 e4       	ldi	r24, 0x40	; 64
 290:	8c bd       	out	0x2c, r24	; 44
}

void spi_master_init()
{
    DDRD |= _BV(MOSI) | _BV(SCK) | _BV(SS);
 292:	8a b1       	in	r24, 0x0a	; 10
 294:	80 6e       	ori	r24, 0xE0	; 224
 296:	8a b9       	out	0x0a, r24	; 10
    PORTD |= _BV(SS);
 298:	5e 9a       	sbi	0x0b, 6	; 11
    stdin = stdout = stderr = &uart_file;
    // zainicjalizuj SPI
    spi_slave_init();
    spi_master_init();
    // program testujący połączenie
    uint8_t v = 0;
 29a:	c0 e0       	ldi	r28, 0x00	; 0
    while(1) {
        spi_transmit(v);
        uint8_t w = spi_receive();
        printf("Wysłano: %"PRId8" Odczytano: %"PRId8"\r\n", v, w);
 29c:	00 e0       	ldi	r16, 0x00	; 0
 29e:	11 e0       	ldi	r17, 0x01	; 1
 2a0:	3e c0       	rjmp	.+124    	; 0x31e <main+0xf0>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2a2:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2a4:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2a6:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2a8:	c6 fd       	sbrc	r28, 6
 2aa:	4a c0       	rjmp	.+148    	; 0x340 <main+0x112>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2ac:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2ae:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2b0:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2b2:	c5 fd       	sbrc	r28, 5
 2b4:	4a c0       	rjmp	.+148    	; 0x34a <main+0x11c>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2b6:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2b8:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2ba:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2bc:	c4 fd       	sbrc	r28, 4
 2be:	4a c0       	rjmp	.+148    	; 0x354 <main+0x126>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2c0:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2c2:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2c4:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2c6:	c3 fd       	sbrc	r28, 3
 2c8:	4a c0       	rjmp	.+148    	; 0x35e <main+0x130>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2ca:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2cc:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2ce:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2d0:	c2 fd       	sbrc	r28, 2
 2d2:	4a c0       	rjmp	.+148    	; 0x368 <main+0x13a>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2d4:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2d6:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2d8:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2da:	c1 fd       	sbrc	r28, 1
 2dc:	4a c0       	rjmp	.+148    	; 0x372 <main+0x144>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2de:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2e0:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2e2:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 2e4:	c0 fd       	sbrc	r28, 0
 2e6:	4a c0       	rjmp	.+148    	; 0x37c <main+0x14e>
        {
            PORTD |= _BV(MOSI);
        }
        else
        {
            PORTD &= ~_BV(MOSI);
 2e8:	5d 98       	cbi	0x0b, 5	; 11
        }
        PORTD |= _BV(SCK);
 2ea:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 2ec:	5f 98       	cbi	0x0b, 7	; 11
    }
    PORTD |= _BV(SCK);
 2ee:	5f 9a       	sbi	0x0b, 7	; 11
    PORTD |= _BV(SS);
 2f0:	5e 9a       	sbi	0x0b, 6	; 11
    // czekaj na ukończenie transmisji
    // while (!(SPSR & _BV(SPIF))); //czekanie jest opcjonalne
    // wyczyść flagę przerwania
    // SPSR |= _BV(SPIF); //czyszczenie bitu przerwania jest opcjonalne
    // zwróć otrzymane dane
    return SPDR;
 2f2:	2e b5       	in	r18, 0x2e	; 46
    // program testujący połączenie
    uint8_t v = 0;
    while(1) {
        spi_transmit(v);
        uint8_t w = spi_receive();
        printf("Wysłano: %"PRId8" Odczytano: %"PRId8"\r\n", v, w);
 2f4:	1f 92       	push	r1
 2f6:	2f 93       	push	r18
 2f8:	9f 93       	push	r25
 2fa:	8f 93       	push	r24
 2fc:	1f 93       	push	r17
 2fe:	0f 93       	push	r16
 300:	0e 94 c0 01 	call	0x380	; 0x380 <printf>
        v++;
 304:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	8f e3       	ldi	r24, 0x3F	; 63
 308:	9c e9       	ldi	r25, 0x9C	; 156
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0xdc>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0xe2>
 310:	00 00       	nop
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
    return SPDR;
}

void spi_transmit(uint8_t data)
{
    PORTD &= ~_BV(SS);
 31e:	5e 98       	cbi	0x0b, 6	; 11
    PORTD &= ~_BV(SCK);
 320:	5f 98       	cbi	0x0b, 7	; 11
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 322:	8c 2f       	mov	r24, r28
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9c 01       	movw	r18, r24
 328:	22 0f       	add	r18, r18
 32a:	23 2f       	mov	r18, r19
 32c:	22 1f       	adc	r18, r18
 32e:	33 0b       	sbc	r19, r19
 330:	23 2b       	or	r18, r19
 332:	09 f4       	brne	.+2      	; 0x336 <main+0x108>
 334:	b6 cf       	rjmp	.-148    	; 0x2a2 <main+0x74>
        {
            PORTD |= _BV(MOSI);
 336:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 338:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 33a:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 33c:	c6 ff       	sbrs	r28, 6
 33e:	b6 cf       	rjmp	.-148    	; 0x2ac <main+0x7e>
        {
            PORTD |= _BV(MOSI);
 340:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 342:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 344:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 346:	c5 ff       	sbrs	r28, 5
 348:	b6 cf       	rjmp	.-148    	; 0x2b6 <main+0x88>
        {
            PORTD |= _BV(MOSI);
 34a:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 34c:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 34e:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 350:	c4 ff       	sbrs	r28, 4
 352:	b6 cf       	rjmp	.-148    	; 0x2c0 <main+0x92>
        {
            PORTD |= _BV(MOSI);
 354:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 356:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 358:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 35a:	c3 ff       	sbrs	r28, 3
 35c:	b6 cf       	rjmp	.-148    	; 0x2ca <main+0x9c>
        {
            PORTD |= _BV(MOSI);
 35e:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 360:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 362:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 364:	c2 ff       	sbrs	r28, 2
 366:	b6 cf       	rjmp	.-148    	; 0x2d4 <main+0xa6>
        {
            PORTD |= _BV(MOSI);
 368:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 36a:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 36c:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 36e:	c1 ff       	sbrs	r28, 1
 370:	b6 cf       	rjmp	.-148    	; 0x2de <main+0xb0>
        {
            PORTD |= _BV(MOSI);
 372:	5d 9a       	sbi	0x0b, 5	; 11
        }
        else
        {
            PORTD &= ~_BV(MOSI);
        }
        PORTD |= _BV(SCK);
 374:	5f 9a       	sbi	0x0b, 7	; 11
        PORTD &= ~_BV(SCK);
 376:	5f 98       	cbi	0x0b, 7	; 11
{
    PORTD &= ~_BV(SS);
    PORTD &= ~_BV(SCK);
    for (int8_t i = 7; i >= 0; i--)
    {
        if ((data & (1 << i)) != 0)
 378:	c0 ff       	sbrs	r28, 0
 37a:	b6 cf       	rjmp	.-148    	; 0x2e8 <main+0xba>
        {
            PORTD |= _BV(MOSI);
 37c:	5d 9a       	sbi	0x0b, 5	; 11
 37e:	b5 cf       	rjmp	.-150    	; 0x2ea <main+0xbc>

00000380 <printf>:
 380:	a0 e0       	ldi	r26, 0x00	; 0
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e6 ec       	ldi	r30, 0xC6	; 198
 386:	f1 e0       	ldi	r31, 0x01	; 1
 388:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__prologue_saves__+0x20>
 38c:	ae 01       	movw	r20, r28
 38e:	4b 5f       	subi	r20, 0xFB	; 251
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	fa 01       	movw	r30, r20
 394:	61 91       	ld	r22, Z+
 396:	71 91       	ld	r23, Z+
 398:	af 01       	movw	r20, r30
 39a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__iob+0x2>
 39e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__iob+0x3>
 3a2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <vfprintf>
 3a6:	e2 e0       	ldi	r30, 0x02	; 2
 3a8:	0c 94 93 04 	jmp	0x926	; 0x926 <__epilogue_restores__+0x20>

000003ac <vfprintf>:
 3ac:	ab e0       	ldi	r26, 0x0B	; 11
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	ec ed       	ldi	r30, 0xDC	; 220
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__prologue_saves__>
 3b8:	6c 01       	movw	r12, r24
 3ba:	7b 01       	movw	r14, r22
 3bc:	8a 01       	movw	r16, r20
 3be:	fc 01       	movw	r30, r24
 3c0:	17 82       	std	Z+7, r1	; 0x07
 3c2:	16 82       	std	Z+6, r1	; 0x06
 3c4:	83 81       	ldd	r24, Z+3	; 0x03
 3c6:	81 ff       	sbrs	r24, 1
 3c8:	cc c1       	rjmp	.+920    	; 0x762 <__EEPROM_REGION_LENGTH__+0x362>
 3ca:	ce 01       	movw	r24, r28
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	3c 01       	movw	r6, r24
 3d0:	f6 01       	movw	r30, r12
 3d2:	93 81       	ldd	r25, Z+3	; 0x03
 3d4:	f7 01       	movw	r30, r14
 3d6:	93 fd       	sbrc	r25, 3
 3d8:	85 91       	lpm	r24, Z+
 3da:	93 ff       	sbrs	r25, 3
 3dc:	81 91       	ld	r24, Z+
 3de:	7f 01       	movw	r14, r30
 3e0:	88 23       	and	r24, r24
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <vfprintf+0x3a>
 3e4:	ba c1       	rjmp	.+884    	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 3e6:	85 32       	cpi	r24, 0x25	; 37
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <vfprintf+0x4c>
 3ea:	93 fd       	sbrc	r25, 3
 3ec:	85 91       	lpm	r24, Z+
 3ee:	93 ff       	sbrs	r25, 3
 3f0:	81 91       	ld	r24, Z+
 3f2:	7f 01       	movw	r14, r30
 3f4:	85 32       	cpi	r24, 0x25	; 37
 3f6:	29 f4       	brne	.+10     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f8:	b6 01       	movw	r22, r12
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 400:	e7 cf       	rjmp	.-50     	; 0x3d0 <vfprintf+0x24>
 402:	91 2c       	mov	r9, r1
 404:	21 2c       	mov	r2, r1
 406:	31 2c       	mov	r3, r1
 408:	ff e1       	ldi	r31, 0x1F	; 31
 40a:	f3 15       	cp	r31, r3
 40c:	d8 f0       	brcs	.+54     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 40e:	8b 32       	cpi	r24, 0x2B	; 43
 410:	79 f0       	breq	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 412:	38 f4       	brcc	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 414:	80 32       	cpi	r24, 0x20	; 32
 416:	79 f0       	breq	.+30     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 418:	83 32       	cpi	r24, 0x23	; 35
 41a:	a1 f4       	brne	.+40     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 41c:	23 2d       	mov	r18, r3
 41e:	20 61       	ori	r18, 0x10	; 16
 420:	1d c0       	rjmp	.+58     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 422:	8d 32       	cpi	r24, 0x2D	; 45
 424:	61 f0       	breq	.+24     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 426:	80 33       	cpi	r24, 0x30	; 48
 428:	69 f4       	brne	.+26     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42a:	23 2d       	mov	r18, r3
 42c:	21 60       	ori	r18, 0x01	; 1
 42e:	16 c0       	rjmp	.+44     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 430:	83 2d       	mov	r24, r3
 432:	82 60       	ori	r24, 0x02	; 2
 434:	38 2e       	mov	r3, r24
 436:	e3 2d       	mov	r30, r3
 438:	e4 60       	ori	r30, 0x04	; 4
 43a:	3e 2e       	mov	r3, r30
 43c:	2a c0       	rjmp	.+84     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 43e:	f3 2d       	mov	r31, r3
 440:	f8 60       	ori	r31, 0x08	; 8
 442:	1d c0       	rjmp	.+58     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 444:	37 fc       	sbrc	r3, 7
 446:	2d c0       	rjmp	.+90     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 448:	20 ed       	ldi	r18, 0xD0	; 208
 44a:	28 0f       	add	r18, r24
 44c:	2a 30       	cpi	r18, 0x0A	; 10
 44e:	40 f0       	brcs	.+16     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 450:	8e 32       	cpi	r24, 0x2E	; 46
 452:	b9 f4       	brne	.+46     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 454:	36 fc       	sbrc	r3, 6
 456:	81 c1       	rjmp	.+770    	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 458:	23 2d       	mov	r18, r3
 45a:	20 64       	ori	r18, 0x40	; 64
 45c:	32 2e       	mov	r3, r18
 45e:	19 c0       	rjmp	.+50     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 460:	36 fe       	sbrs	r3, 6
 462:	06 c0       	rjmp	.+12     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 464:	8a e0       	ldi	r24, 0x0A	; 10
 466:	98 9e       	mul	r9, r24
 468:	20 0d       	add	r18, r0
 46a:	11 24       	eor	r1, r1
 46c:	92 2e       	mov	r9, r18
 46e:	11 c0       	rjmp	.+34     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 470:	ea e0       	ldi	r30, 0x0A	; 10
 472:	2e 9e       	mul	r2, r30
 474:	20 0d       	add	r18, r0
 476:	11 24       	eor	r1, r1
 478:	22 2e       	mov	r2, r18
 47a:	f3 2d       	mov	r31, r3
 47c:	f0 62       	ori	r31, 0x20	; 32
 47e:	3f 2e       	mov	r3, r31
 480:	08 c0       	rjmp	.+16     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 482:	8c 36       	cpi	r24, 0x6C	; 108
 484:	21 f4       	brne	.+8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 486:	83 2d       	mov	r24, r3
 488:	80 68       	ori	r24, 0x80	; 128
 48a:	38 2e       	mov	r3, r24
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48e:	88 36       	cpi	r24, 0x68	; 104
 490:	41 f4       	brne	.+16     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 492:	f7 01       	movw	r30, r14
 494:	93 fd       	sbrc	r25, 3
 496:	85 91       	lpm	r24, Z+
 498:	93 ff       	sbrs	r25, 3
 49a:	81 91       	ld	r24, Z+
 49c:	7f 01       	movw	r14, r30
 49e:	81 11       	cpse	r24, r1
 4a0:	b3 cf       	rjmp	.-154    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 4a2:	98 2f       	mov	r25, r24
 4a4:	9f 7d       	andi	r25, 0xDF	; 223
 4a6:	95 54       	subi	r25, 0x45	; 69
 4a8:	93 30       	cpi	r25, 0x03	; 3
 4aa:	28 f4       	brcc	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ac:	0c 5f       	subi	r16, 0xFC	; 252
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
 4b0:	9f e3       	ldi	r25, 0x3F	; 63
 4b2:	99 83       	std	Y+1, r25	; 0x01
 4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4b6:	83 36       	cpi	r24, 0x63	; 99
 4b8:	31 f0       	breq	.+12     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ba:	83 37       	cpi	r24, 0x73	; 115
 4bc:	71 f0       	breq	.+28     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4be:	83 35       	cpi	r24, 0x53	; 83
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c2:	59 c0       	rjmp	.+178    	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
 4c4:	21 c0       	rjmp	.+66     	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 4c6:	f8 01       	movw	r30, r16
 4c8:	80 81       	ld	r24, Z
 4ca:	89 83       	std	Y+1, r24	; 0x01
 4cc:	0e 5f       	subi	r16, 0xFE	; 254
 4ce:	1f 4f       	sbci	r17, 0xFF	; 255
 4d0:	88 24       	eor	r8, r8
 4d2:	83 94       	inc	r8
 4d4:	91 2c       	mov	r9, r1
 4d6:	53 01       	movw	r10, r6
 4d8:	13 c0       	rjmp	.+38     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4da:	28 01       	movw	r4, r16
 4dc:	f2 e0       	ldi	r31, 0x02	; 2
 4de:	4f 0e       	add	r4, r31
 4e0:	51 1c       	adc	r5, r1
 4e2:	f8 01       	movw	r30, r16
 4e4:	a0 80       	ld	r10, Z
 4e6:	b1 80       	ldd	r11, Z+1	; 0x01
 4e8:	36 fe       	sbrs	r3, 6
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4ec:	69 2d       	mov	r22, r9
 4ee:	70 e0       	ldi	r23, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f2:	6f ef       	ldi	r22, 0xFF	; 255
 4f4:	7f ef       	ldi	r23, 0xFF	; 255
 4f6:	c5 01       	movw	r24, r10
 4f8:	0e 94 c2 03 	call	0x784	; 0x784 <strnlen>
 4fc:	4c 01       	movw	r8, r24
 4fe:	82 01       	movw	r16, r4
 500:	f3 2d       	mov	r31, r3
 502:	ff 77       	andi	r31, 0x7F	; 127
 504:	3f 2e       	mov	r3, r31
 506:	16 c0       	rjmp	.+44     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 508:	28 01       	movw	r4, r16
 50a:	22 e0       	ldi	r18, 0x02	; 2
 50c:	42 0e       	add	r4, r18
 50e:	51 1c       	adc	r5, r1
 510:	f8 01       	movw	r30, r16
 512:	a0 80       	ld	r10, Z
 514:	b1 80       	ldd	r11, Z+1	; 0x01
 516:	36 fe       	sbrs	r3, 6
 518:	03 c0       	rjmp	.+6      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 51a:	69 2d       	mov	r22, r9
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 520:	6f ef       	ldi	r22, 0xFF	; 255
 522:	7f ef       	ldi	r23, 0xFF	; 255
 524:	c5 01       	movw	r24, r10
 526:	0e 94 b7 03 	call	0x76e	; 0x76e <strnlen_P>
 52a:	4c 01       	movw	r8, r24
 52c:	f3 2d       	mov	r31, r3
 52e:	f0 68       	ori	r31, 0x80	; 128
 530:	3f 2e       	mov	r3, r31
 532:	82 01       	movw	r16, r4
 534:	33 fc       	sbrc	r3, 3
 536:	1b c0       	rjmp	.+54     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 538:	82 2d       	mov	r24, r2
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	88 16       	cp	r8, r24
 53e:	99 06       	cpc	r9, r25
 540:	b0 f4       	brcc	.+44     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 542:	b6 01       	movw	r22, r12
 544:	80 e2       	ldi	r24, 0x20	; 32
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 54c:	2a 94       	dec	r2
 54e:	f4 cf       	rjmp	.-24     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 550:	f5 01       	movw	r30, r10
 552:	37 fc       	sbrc	r3, 7
 554:	85 91       	lpm	r24, Z+
 556:	37 fe       	sbrs	r3, 7
 558:	81 91       	ld	r24, Z+
 55a:	5f 01       	movw	r10, r30
 55c:	b6 01       	movw	r22, r12
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 564:	21 10       	cpse	r2, r1
 566:	2a 94       	dec	r2
 568:	21 e0       	ldi	r18, 0x01	; 1
 56a:	82 1a       	sub	r8, r18
 56c:	91 08       	sbc	r9, r1
 56e:	81 14       	cp	r8, r1
 570:	91 04       	cpc	r9, r1
 572:	71 f7       	brne	.-36     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 574:	e8 c0       	rjmp	.+464    	; 0x746 <__EEPROM_REGION_LENGTH__+0x346>
 576:	84 36       	cpi	r24, 0x64	; 100
 578:	11 f0       	breq	.+4      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
 57a:	89 36       	cpi	r24, 0x69	; 105
 57c:	41 f5       	brne	.+80     	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
 57e:	f8 01       	movw	r30, r16
 580:	37 fe       	sbrs	r3, 7
 582:	07 c0       	rjmp	.+14     	; 0x592 <__EEPROM_REGION_LENGTH__+0x192>
 584:	60 81       	ld	r22, Z
 586:	71 81       	ldd	r23, Z+1	; 0x01
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	93 81       	ldd	r25, Z+3	; 0x03
 58c:	0c 5f       	subi	r16, 0xFC	; 252
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	08 c0       	rjmp	.+16     	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 592:	60 81       	ld	r22, Z
 594:	71 81       	ldd	r23, Z+1	; 0x01
 596:	07 2e       	mov	r0, r23
 598:	00 0c       	add	r0, r0
 59a:	88 0b       	sbc	r24, r24
 59c:	99 0b       	sbc	r25, r25
 59e:	0e 5f       	subi	r16, 0xFE	; 254
 5a0:	1f 4f       	sbci	r17, 0xFF	; 255
 5a2:	f3 2d       	mov	r31, r3
 5a4:	ff 76       	andi	r31, 0x6F	; 111
 5a6:	3f 2e       	mov	r3, r31
 5a8:	97 ff       	sbrs	r25, 7
 5aa:	09 c0       	rjmp	.+18     	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
 5ac:	90 95       	com	r25
 5ae:	80 95       	com	r24
 5b0:	70 95       	com	r23
 5b2:	61 95       	neg	r22
 5b4:	7f 4f       	sbci	r23, 0xFF	; 255
 5b6:	8f 4f       	sbci	r24, 0xFF	; 255
 5b8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ba:	f0 68       	ori	r31, 0x80	; 128
 5bc:	3f 2e       	mov	r3, r31
 5be:	2a e0       	ldi	r18, 0x0A	; 10
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	a3 01       	movw	r20, r6
 5c4:	0e 94 09 04 	call	0x812	; 0x812 <__ultoa_invert>
 5c8:	88 2e       	mov	r8, r24
 5ca:	86 18       	sub	r8, r6
 5cc:	45 c0       	rjmp	.+138    	; 0x658 <__EEPROM_REGION_LENGTH__+0x258>
 5ce:	85 37       	cpi	r24, 0x75	; 117
 5d0:	31 f4       	brne	.+12     	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
 5d2:	23 2d       	mov	r18, r3
 5d4:	2f 7e       	andi	r18, 0xEF	; 239
 5d6:	b2 2e       	mov	r11, r18
 5d8:	2a e0       	ldi	r18, 0x0A	; 10
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	25 c0       	rjmp	.+74     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
 5de:	93 2d       	mov	r25, r3
 5e0:	99 7f       	andi	r25, 0xF9	; 249
 5e2:	b9 2e       	mov	r11, r25
 5e4:	8f 36       	cpi	r24, 0x6F	; 111
 5e6:	c1 f0       	breq	.+48     	; 0x618 <__EEPROM_REGION_LENGTH__+0x218>
 5e8:	18 f4       	brcc	.+6      	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
 5ea:	88 35       	cpi	r24, 0x58	; 88
 5ec:	79 f0       	breq	.+30     	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
 5ee:	b5 c0       	rjmp	.+362    	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 5f0:	80 37       	cpi	r24, 0x70	; 112
 5f2:	19 f0       	breq	.+6      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 5f4:	88 37       	cpi	r24, 0x78	; 120
 5f6:	21 f0       	breq	.+8      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
 5f8:	b0 c0       	rjmp	.+352    	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
 5fa:	e9 2f       	mov	r30, r25
 5fc:	e0 61       	ori	r30, 0x10	; 16
 5fe:	be 2e       	mov	r11, r30
 600:	b4 fe       	sbrs	r11, 4
 602:	0d c0       	rjmp	.+26     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
 604:	fb 2d       	mov	r31, r11
 606:	f4 60       	ori	r31, 0x04	; 4
 608:	bf 2e       	mov	r11, r31
 60a:	09 c0       	rjmp	.+18     	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
 60c:	34 fe       	sbrs	r3, 4
 60e:	0a c0       	rjmp	.+20     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 610:	29 2f       	mov	r18, r25
 612:	26 60       	ori	r18, 0x06	; 6
 614:	b2 2e       	mov	r11, r18
 616:	06 c0       	rjmp	.+12     	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 618:	28 e0       	ldi	r18, 0x08	; 8
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	05 c0       	rjmp	.+10     	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
 61e:	20 e1       	ldi	r18, 0x10	; 16
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <__EEPROM_REGION_LENGTH__+0x228>
 624:	20 e1       	ldi	r18, 0x10	; 16
 626:	32 e0       	ldi	r19, 0x02	; 2
 628:	f8 01       	movw	r30, r16
 62a:	b7 fe       	sbrs	r11, 7
 62c:	07 c0       	rjmp	.+14     	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
 62e:	60 81       	ld	r22, Z
 630:	71 81       	ldd	r23, Z+1	; 0x01
 632:	82 81       	ldd	r24, Z+2	; 0x02
 634:	93 81       	ldd	r25, Z+3	; 0x03
 636:	0c 5f       	subi	r16, 0xFC	; 252
 638:	1f 4f       	sbci	r17, 0xFF	; 255
 63a:	06 c0       	rjmp	.+12     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
 63c:	60 81       	ld	r22, Z
 63e:	71 81       	ldd	r23, Z+1	; 0x01
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	0e 5f       	subi	r16, 0xFE	; 254
 646:	1f 4f       	sbci	r17, 0xFF	; 255
 648:	a3 01       	movw	r20, r6
 64a:	0e 94 09 04 	call	0x812	; 0x812 <__ultoa_invert>
 64e:	88 2e       	mov	r8, r24
 650:	86 18       	sub	r8, r6
 652:	fb 2d       	mov	r31, r11
 654:	ff 77       	andi	r31, 0x7F	; 127
 656:	3f 2e       	mov	r3, r31
 658:	36 fe       	sbrs	r3, 6
 65a:	0d c0       	rjmp	.+26     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 65c:	23 2d       	mov	r18, r3
 65e:	2e 7f       	andi	r18, 0xFE	; 254
 660:	a2 2e       	mov	r10, r18
 662:	89 14       	cp	r8, r9
 664:	58 f4       	brcc	.+22     	; 0x67c <__EEPROM_REGION_LENGTH__+0x27c>
 666:	34 fe       	sbrs	r3, 4
 668:	0b c0       	rjmp	.+22     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
 66a:	32 fc       	sbrc	r3, 2
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
 66e:	83 2d       	mov	r24, r3
 670:	8e 7e       	andi	r24, 0xEE	; 238
 672:	a8 2e       	mov	r10, r24
 674:	05 c0       	rjmp	.+10     	; 0x680 <__EEPROM_REGION_LENGTH__+0x280>
 676:	b8 2c       	mov	r11, r8
 678:	a3 2c       	mov	r10, r3
 67a:	03 c0       	rjmp	.+6      	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
 67c:	b8 2c       	mov	r11, r8
 67e:	01 c0       	rjmp	.+2      	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
 680:	b9 2c       	mov	r11, r9
 682:	a4 fe       	sbrs	r10, 4
 684:	0f c0       	rjmp	.+30     	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 686:	fe 01       	movw	r30, r28
 688:	e8 0d       	add	r30, r8
 68a:	f1 1d       	adc	r31, r1
 68c:	80 81       	ld	r24, Z
 68e:	80 33       	cpi	r24, 0x30	; 48
 690:	21 f4       	brne	.+8      	; 0x69a <__EEPROM_REGION_LENGTH__+0x29a>
 692:	9a 2d       	mov	r25, r10
 694:	99 7e       	andi	r25, 0xE9	; 233
 696:	a9 2e       	mov	r10, r25
 698:	09 c0       	rjmp	.+18     	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
 69a:	a2 fe       	sbrs	r10, 2
 69c:	06 c0       	rjmp	.+12     	; 0x6aa <__EEPROM_REGION_LENGTH__+0x2aa>
 69e:	b3 94       	inc	r11
 6a0:	b3 94       	inc	r11
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
 6a4:	8a 2d       	mov	r24, r10
 6a6:	86 78       	andi	r24, 0x86	; 134
 6a8:	09 f0       	breq	.+2      	; 0x6ac <__EEPROM_REGION_LENGTH__+0x2ac>
 6aa:	b3 94       	inc	r11
 6ac:	a3 fc       	sbrc	r10, 3
 6ae:	11 c0       	rjmp	.+34     	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
 6b0:	a0 fe       	sbrs	r10, 0
 6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
 6b4:	b2 14       	cp	r11, r2
 6b6:	88 f4       	brcc	.+34     	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
 6b8:	28 0c       	add	r2, r8
 6ba:	92 2c       	mov	r9, r2
 6bc:	9b 18       	sub	r9, r11
 6be:	0e c0       	rjmp	.+28     	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6c0:	b2 14       	cp	r11, r2
 6c2:	60 f4       	brcc	.+24     	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6c4:	b6 01       	movw	r22, r12
 6c6:	80 e2       	ldi	r24, 0x20	; 32
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 6ce:	b3 94       	inc	r11
 6d0:	f7 cf       	rjmp	.-18     	; 0x6c0 <__EEPROM_REGION_LENGTH__+0x2c0>
 6d2:	b2 14       	cp	r11, r2
 6d4:	18 f4       	brcc	.+6      	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6d6:	2b 18       	sub	r2, r11
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
 6da:	98 2c       	mov	r9, r8
 6dc:	21 2c       	mov	r2, r1
 6de:	a4 fe       	sbrs	r10, 4
 6e0:	10 c0       	rjmp	.+32     	; 0x702 <__EEPROM_REGION_LENGTH__+0x302>
 6e2:	b6 01       	movw	r22, r12
 6e4:	80 e3       	ldi	r24, 0x30	; 48
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 6ec:	a2 fe       	sbrs	r10, 2
 6ee:	17 c0       	rjmp	.+46     	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
 6f0:	a1 fc       	sbrc	r10, 1
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <__EEPROM_REGION_LENGTH__+0x2fa>
 6f4:	88 e7       	ldi	r24, 0x78	; 120
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <__EEPROM_REGION_LENGTH__+0x2fe>
 6fa:	88 e5       	ldi	r24, 0x58	; 88
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	b6 01       	movw	r22, r12
 700:	0c c0       	rjmp	.+24     	; 0x71a <__EEPROM_REGION_LENGTH__+0x31a>
 702:	8a 2d       	mov	r24, r10
 704:	86 78       	andi	r24, 0x86	; 134
 706:	59 f0       	breq	.+22     	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
 708:	a1 fe       	sbrs	r10, 1
 70a:	02 c0       	rjmp	.+4      	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 70c:	8b e2       	ldi	r24, 0x2B	; 43
 70e:	01 c0       	rjmp	.+2      	; 0x712 <__EEPROM_REGION_LENGTH__+0x312>
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	a7 fc       	sbrc	r10, 7
 714:	8d e2       	ldi	r24, 0x2D	; 45
 716:	b6 01       	movw	r22, r12
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 71e:	89 14       	cp	r8, r9
 720:	38 f4       	brcc	.+14     	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
 722:	b6 01       	movw	r22, r12
 724:	80 e3       	ldi	r24, 0x30	; 48
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 72c:	9a 94       	dec	r9
 72e:	f7 cf       	rjmp	.-18     	; 0x71e <__EEPROM_REGION_LENGTH__+0x31e>
 730:	8a 94       	dec	r8
 732:	f3 01       	movw	r30, r6
 734:	e8 0d       	add	r30, r8
 736:	f1 1d       	adc	r31, r1
 738:	80 81       	ld	r24, Z
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 742:	81 10       	cpse	r8, r1
 744:	f5 cf       	rjmp	.-22     	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
 746:	22 20       	and	r2, r2
 748:	09 f4       	brne	.+2      	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
 74a:	42 ce       	rjmp	.-892    	; 0x3d0 <vfprintf+0x24>
 74c:	b6 01       	movw	r22, r12
 74e:	80 e2       	ldi	r24, 0x20	; 32
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 cd 03 	call	0x79a	; 0x79a <fputc>
 756:	2a 94       	dec	r2
 758:	f6 cf       	rjmp	.-20     	; 0x746 <__EEPROM_REGION_LENGTH__+0x346>
 75a:	f6 01       	movw	r30, r12
 75c:	86 81       	ldd	r24, Z+6	; 0x06
 75e:	97 81       	ldd	r25, Z+7	; 0x07
 760:	02 c0       	rjmp	.+4      	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	9f ef       	ldi	r25, 0xFF	; 255
 766:	2b 96       	adiw	r28, 0x0b	; 11
 768:	e2 e1       	ldi	r30, 0x12	; 18
 76a:	0c 94 83 04 	jmp	0x906	; 0x906 <__epilogue_restores__>

0000076e <strnlen_P>:
 76e:	fc 01       	movw	r30, r24
 770:	05 90       	lpm	r0, Z+
 772:	61 50       	subi	r22, 0x01	; 1
 774:	70 40       	sbci	r23, 0x00	; 0
 776:	01 10       	cpse	r0, r1
 778:	d8 f7       	brcc	.-10     	; 0x770 <strnlen_P+0x2>
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	8e 0f       	add	r24, r30
 780:	9f 1f       	adc	r25, r31
 782:	08 95       	ret

00000784 <strnlen>:
 784:	fc 01       	movw	r30, r24
 786:	61 50       	subi	r22, 0x01	; 1
 788:	70 40       	sbci	r23, 0x00	; 0
 78a:	01 90       	ld	r0, Z+
 78c:	01 10       	cpse	r0, r1
 78e:	d8 f7       	brcc	.-10     	; 0x786 <strnlen+0x2>
 790:	80 95       	com	r24
 792:	90 95       	com	r25
 794:	8e 0f       	add	r24, r30
 796:	9f 1f       	adc	r25, r31
 798:	08 95       	ret

0000079a <fputc>:
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	fb 01       	movw	r30, r22
 7a4:	23 81       	ldd	r18, Z+3	; 0x03
 7a6:	21 fd       	sbrc	r18, 1
 7a8:	03 c0       	rjmp	.+6      	; 0x7b0 <fputc+0x16>
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	9f ef       	ldi	r25, 0xFF	; 255
 7ae:	2c c0       	rjmp	.+88     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7b0:	22 ff       	sbrs	r18, 2
 7b2:	16 c0       	rjmp	.+44     	; 0x7e0 <fputc+0x46>
 7b4:	46 81       	ldd	r20, Z+6	; 0x06
 7b6:	57 81       	ldd	r21, Z+7	; 0x07
 7b8:	24 81       	ldd	r18, Z+4	; 0x04
 7ba:	35 81       	ldd	r19, Z+5	; 0x05
 7bc:	42 17       	cp	r20, r18
 7be:	53 07       	cpc	r21, r19
 7c0:	44 f4       	brge	.+16     	; 0x7d2 <fputc+0x38>
 7c2:	a0 81       	ld	r26, Z
 7c4:	b1 81       	ldd	r27, Z+1	; 0x01
 7c6:	9d 01       	movw	r18, r26
 7c8:	2f 5f       	subi	r18, 0xFF	; 255
 7ca:	3f 4f       	sbci	r19, 0xFF	; 255
 7cc:	31 83       	std	Z+1, r19	; 0x01
 7ce:	20 83       	st	Z, r18
 7d0:	8c 93       	st	X, r24
 7d2:	26 81       	ldd	r18, Z+6	; 0x06
 7d4:	37 81       	ldd	r19, Z+7	; 0x07
 7d6:	2f 5f       	subi	r18, 0xFF	; 255
 7d8:	3f 4f       	sbci	r19, 0xFF	; 255
 7da:	37 83       	std	Z+7, r19	; 0x07
 7dc:	26 83       	std	Z+6, r18	; 0x06
 7de:	14 c0       	rjmp	.+40     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7e0:	8b 01       	movw	r16, r22
 7e2:	ec 01       	movw	r28, r24
 7e4:	fb 01       	movw	r30, r22
 7e6:	00 84       	ldd	r0, Z+8	; 0x08
 7e8:	f1 85       	ldd	r31, Z+9	; 0x09
 7ea:	e0 2d       	mov	r30, r0
 7ec:	09 95       	icall
 7ee:	89 2b       	or	r24, r25
 7f0:	e1 f6       	brne	.-72     	; 0x7aa <fputc+0x10>
 7f2:	d8 01       	movw	r26, r16
 7f4:	16 96       	adiw	r26, 0x06	; 6
 7f6:	8d 91       	ld	r24, X+
 7f8:	9c 91       	ld	r25, X
 7fa:	17 97       	sbiw	r26, 0x07	; 7
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	17 96       	adiw	r26, 0x07	; 7
 800:	9c 93       	st	X, r25
 802:	8e 93       	st	-X, r24
 804:	16 97       	sbiw	r26, 0x06	; 6
 806:	ce 01       	movw	r24, r28
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	0f 91       	pop	r16
 810:	08 95       	ret

00000812 <__ultoa_invert>:
 812:	fa 01       	movw	r30, r20
 814:	aa 27       	eor	r26, r26
 816:	28 30       	cpi	r18, 0x08	; 8
 818:	51 f1       	breq	.+84     	; 0x86e <__ultoa_invert+0x5c>
 81a:	20 31       	cpi	r18, 0x10	; 16
 81c:	81 f1       	breq	.+96     	; 0x87e <__ultoa_invert+0x6c>
 81e:	e8 94       	clt
 820:	6f 93       	push	r22
 822:	6e 7f       	andi	r22, 0xFE	; 254
 824:	6e 5f       	subi	r22, 0xFE	; 254
 826:	7f 4f       	sbci	r23, 0xFF	; 255
 828:	8f 4f       	sbci	r24, 0xFF	; 255
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	af 4f       	sbci	r26, 0xFF	; 255
 82e:	b1 e0       	ldi	r27, 0x01	; 1
 830:	3e d0       	rcall	.+124    	; 0x8ae <__ultoa_invert+0x9c>
 832:	b4 e0       	ldi	r27, 0x04	; 4
 834:	3c d0       	rcall	.+120    	; 0x8ae <__ultoa_invert+0x9c>
 836:	67 0f       	add	r22, r23
 838:	78 1f       	adc	r23, r24
 83a:	89 1f       	adc	r24, r25
 83c:	9a 1f       	adc	r25, r26
 83e:	a1 1d       	adc	r26, r1
 840:	68 0f       	add	r22, r24
 842:	79 1f       	adc	r23, r25
 844:	8a 1f       	adc	r24, r26
 846:	91 1d       	adc	r25, r1
 848:	a1 1d       	adc	r26, r1
 84a:	6a 0f       	add	r22, r26
 84c:	71 1d       	adc	r23, r1
 84e:	81 1d       	adc	r24, r1
 850:	91 1d       	adc	r25, r1
 852:	a1 1d       	adc	r26, r1
 854:	20 d0       	rcall	.+64     	; 0x896 <__ultoa_invert+0x84>
 856:	09 f4       	brne	.+2      	; 0x85a <__ultoa_invert+0x48>
 858:	68 94       	set
 85a:	3f 91       	pop	r19
 85c:	2a e0       	ldi	r18, 0x0A	; 10
 85e:	26 9f       	mul	r18, r22
 860:	11 24       	eor	r1, r1
 862:	30 19       	sub	r19, r0
 864:	30 5d       	subi	r19, 0xD0	; 208
 866:	31 93       	st	Z+, r19
 868:	de f6       	brtc	.-74     	; 0x820 <__ultoa_invert+0xe>
 86a:	cf 01       	movw	r24, r30
 86c:	08 95       	ret
 86e:	46 2f       	mov	r20, r22
 870:	47 70       	andi	r20, 0x07	; 7
 872:	40 5d       	subi	r20, 0xD0	; 208
 874:	41 93       	st	Z+, r20
 876:	b3 e0       	ldi	r27, 0x03	; 3
 878:	0f d0       	rcall	.+30     	; 0x898 <__ultoa_invert+0x86>
 87a:	c9 f7       	brne	.-14     	; 0x86e <__ultoa_invert+0x5c>
 87c:	f6 cf       	rjmp	.-20     	; 0x86a <__ultoa_invert+0x58>
 87e:	46 2f       	mov	r20, r22
 880:	4f 70       	andi	r20, 0x0F	; 15
 882:	40 5d       	subi	r20, 0xD0	; 208
 884:	4a 33       	cpi	r20, 0x3A	; 58
 886:	18 f0       	brcs	.+6      	; 0x88e <__ultoa_invert+0x7c>
 888:	49 5d       	subi	r20, 0xD9	; 217
 88a:	31 fd       	sbrc	r19, 1
 88c:	40 52       	subi	r20, 0x20	; 32
 88e:	41 93       	st	Z+, r20
 890:	02 d0       	rcall	.+4      	; 0x896 <__ultoa_invert+0x84>
 892:	a9 f7       	brne	.-22     	; 0x87e <__ultoa_invert+0x6c>
 894:	ea cf       	rjmp	.-44     	; 0x86a <__ultoa_invert+0x58>
 896:	b4 e0       	ldi	r27, 0x04	; 4
 898:	a6 95       	lsr	r26
 89a:	97 95       	ror	r25
 89c:	87 95       	ror	r24
 89e:	77 95       	ror	r23
 8a0:	67 95       	ror	r22
 8a2:	ba 95       	dec	r27
 8a4:	c9 f7       	brne	.-14     	; 0x898 <__ultoa_invert+0x86>
 8a6:	00 97       	sbiw	r24, 0x00	; 0
 8a8:	61 05       	cpc	r22, r1
 8aa:	71 05       	cpc	r23, r1
 8ac:	08 95       	ret
 8ae:	9b 01       	movw	r18, r22
 8b0:	ac 01       	movw	r20, r24
 8b2:	0a 2e       	mov	r0, r26
 8b4:	06 94       	lsr	r0
 8b6:	57 95       	ror	r21
 8b8:	47 95       	ror	r20
 8ba:	37 95       	ror	r19
 8bc:	27 95       	ror	r18
 8be:	ba 95       	dec	r27
 8c0:	c9 f7       	brne	.-14     	; 0x8b4 <__ultoa_invert+0xa2>
 8c2:	62 0f       	add	r22, r18
 8c4:	73 1f       	adc	r23, r19
 8c6:	84 1f       	adc	r24, r20
 8c8:	95 1f       	adc	r25, r21
 8ca:	a0 1d       	adc	r26, r0
 8cc:	08 95       	ret

000008ce <__prologue_saves__>:
 8ce:	2f 92       	push	r2
 8d0:	3f 92       	push	r3
 8d2:	4f 92       	push	r4
 8d4:	5f 92       	push	r5
 8d6:	6f 92       	push	r6
 8d8:	7f 92       	push	r7
 8da:	8f 92       	push	r8
 8dc:	9f 92       	push	r9
 8de:	af 92       	push	r10
 8e0:	bf 92       	push	r11
 8e2:	cf 92       	push	r12
 8e4:	df 92       	push	r13
 8e6:	ef 92       	push	r14
 8e8:	ff 92       	push	r15
 8ea:	0f 93       	push	r16
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	cd b7       	in	r28, 0x3d	; 61
 8f4:	de b7       	in	r29, 0x3e	; 62
 8f6:	ca 1b       	sub	r28, r26
 8f8:	db 0b       	sbc	r29, r27
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	f8 94       	cli
 8fe:	de bf       	out	0x3e, r29	; 62
 900:	0f be       	out	0x3f, r0	; 63
 902:	cd bf       	out	0x3d, r28	; 61
 904:	09 94       	ijmp

00000906 <__epilogue_restores__>:
 906:	2a 88       	ldd	r2, Y+18	; 0x12
 908:	39 88       	ldd	r3, Y+17	; 0x11
 90a:	48 88       	ldd	r4, Y+16	; 0x10
 90c:	5f 84       	ldd	r5, Y+15	; 0x0f
 90e:	6e 84       	ldd	r6, Y+14	; 0x0e
 910:	7d 84       	ldd	r7, Y+13	; 0x0d
 912:	8c 84       	ldd	r8, Y+12	; 0x0c
 914:	9b 84       	ldd	r9, Y+11	; 0x0b
 916:	aa 84       	ldd	r10, Y+10	; 0x0a
 918:	b9 84       	ldd	r11, Y+9	; 0x09
 91a:	c8 84       	ldd	r12, Y+8	; 0x08
 91c:	df 80       	ldd	r13, Y+7	; 0x07
 91e:	ee 80       	ldd	r14, Y+6	; 0x06
 920:	fd 80       	ldd	r15, Y+5	; 0x05
 922:	0c 81       	ldd	r16, Y+4	; 0x04
 924:	1b 81       	ldd	r17, Y+3	; 0x03
 926:	aa 81       	ldd	r26, Y+2	; 0x02
 928:	b9 81       	ldd	r27, Y+1	; 0x01
 92a:	ce 0f       	add	r28, r30
 92c:	d1 1d       	adc	r29, r1
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	f8 94       	cli
 932:	de bf       	out	0x3e, r29	; 62
 934:	0f be       	out	0x3f, r0	; 63
 936:	cd bf       	out	0x3d, r28	; 61
 938:	ed 01       	movw	r28, r26
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>

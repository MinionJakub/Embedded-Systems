
zadanie2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000090a  0000099e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000090a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080011a  0080011a  000009b8  2**0
                  ALLOC
  3 .stab         00000b28  00000000  00000000  000009b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f05  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000023e5  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000023f8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00002fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  9e:	0c 94 83 04 	jmp	0x906	; 0x906 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
  // czekaj aż transmiter gotowy
  while(!(UCSR0A & _BV(UDRE0)));
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
  // czekaj aż znak dostępny
  while (!(UCSR0A & _BV(RXC0)));
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
  return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e4:	08 95       	ret

000000e6 <main>:
}

FILE uart_file;

int main(){
    UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
  e6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ea:	88 61       	ori	r24, 0x18	; 24
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    BUTTON_DDR &= ~_BV(BUTTON);
  f0:	52 98       	cbi	0x0a, 2	; 10
    BUTTON_PORT |= _BV(BUTTON);
  f2:	5a 9a       	sbi	0x0b, 2	; 11

    LED_DDR  |= _BV(LED);
  f4:	25 9a       	sbi	0x04, 5	; 4

// inicjalizacja UART
void uart_init()
{
  // ustaw baudrate
  UBRR0 = UBRR_VALUE;
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  // wyczyść rejestr UCSR0A
  UCSR0A = 0;
 102:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  // włącz odbiornik i nadajnik
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 106:	88 e1       	ldi	r24, 0x18	; 24
 108:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  // ustaw format 8n1
  UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    LED_DDR  |= _BV(LED);

    // zainicjalizuj UART
    uart_init();
    // skonfiguruj strumienie wejścia/wyjścia
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
 112:	8a e1       	ldi	r24, 0x1A	; 26
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	23 e5       	ldi	r18, 0x53	; 83
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <__data_end+0x9>
 11e:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <__data_end+0x8>
 122:	2c e5       	ldi	r18, 0x5C	; 92
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <__data_end+0xb>
 12a:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <__data_end+0xa>
 12e:	23 e0       	ldi	r18, 0x03	; 3
 130:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <__data_end+0x3>
 134:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0xd>
 138:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end+0xc>
    stdin = stdout = stderr = &uart_file;
 13c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__iob+0x5>
 140:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__iob+0x4>
 144:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__iob+0x3>
 148:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__iob+0x2>
 14c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__iob+0x1>
 150:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__iob>
    printf("test\r\n");
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 8b 01 	call	0x316	; 0x316 <puts>
    int8_t count_time = 0;
    int8_t decoding = 0;
    int8_t first_time = 0;
    int8_t reading;
    int8_t readed_signs = 0;
    int8_t signs = 0;
 15c:	20 e0       	ldi	r18, 0x00	; 0
    int8_t long_sign = 0;
    int8_t count_time = 0;
    int8_t decoding = 0;
    int8_t first_time = 0;
    int8_t reading;
    int8_t readed_signs = 0;
 15e:	90 e0       	ldi	r25, 0x00	; 0
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
    stdin = stdout = stderr = &uart_file;
    printf("test\r\n");
    int8_t long_sign = 0;
    int8_t count_time = 0;
    int8_t decoding = 0;
 160:	d0 e0       	ldi	r29, 0x00	; 0
    // skonfiguruj strumienie wejścia/wyjścia
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
    stdin = stdout = stderr = &uart_file;
    printf("test\r\n");
    int8_t long_sign = 0;
    int8_t count_time = 0;
 162:	c0 e0       	ldi	r28, 0x00	; 0
    uart_init();
    // skonfiguruj strumienie wejścia/wyjścia
    fdev_setup_stream(&uart_file, uart_transmit, uart_receive, _FDEV_SETUP_RW);
    stdin = stdout = stderr = &uart_file;
    printf("test\r\n");
    int8_t long_sign = 0;
 164:	f1 2c       	mov	r15, r1
                readed_signs ++;}
            }
            else count_time++;
            if(count_time == 8){
                val = decode(readed_signs,signs);
                if(readed_signs != 0)printf("%c:\tlen:%"PRId8"\tval:%"PRId8"\r\n",val,readed_signs,signs);
 166:	06 e0       	ldi	r16, 0x06	; 6
 168:	11 e0       	ldi	r17, 0x01	; 1
 16a:	1b c0       	rjmp	.+54     	; 0x1a2 <main+0xbc>
    int8_t readed_signs = 0;
    int8_t signs = 0;
    char val;
    while(1){
        reading = !(PIND&(_BV(BUTTON))); //read_state();
        if(decoding && !reading){
 16c:	88 23       	and	r24, r24
 16e:	b9 f1       	breq	.+110    	; 0x1de <main+0xf8>
            first_time = 1;
            decoding = 0;
        }
        if(!reading ){
            // count_time 
            LED_PORT &= ~_BV(LED);
 170:	2d 98       	cbi	0x05, 5	; 5
            if(first_time){
                count_time = 0;
                first_time = 0;
                if(readed_signs < 4){
 172:	94 30       	cpi	r25, 0x04	; 4
 174:	5c f4       	brge	.+22     	; 0x18c <main+0xa6>
                signs |= (long_sign*(_BV(readed_signs)));
 176:	4f 2d       	mov	r20, r15
 178:	0f 2c       	mov	r0, r15
 17a:	00 0c       	add	r0, r0
 17c:	55 0b       	sbc	r21, r21
 17e:	09 2e       	mov	r0, r25
 180:	01 c0       	rjmp	.+2      	; 0x184 <main+0x9e>
 182:	44 0f       	add	r20, r20
 184:	0a 94       	dec	r0
 186:	ea f7       	brpl	.-6      	; 0x182 <main+0x9c>
 188:	24 2b       	or	r18, r20
                readed_signs ++;}
 18a:	9f 5f       	subi	r25, 0xFF	; 255
    while(1){
        reading = !(PIND&(_BV(BUTTON))); //read_state();
        if(decoding && !reading){
            count_time = 0;
            first_time = 1;
            decoding = 0;
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	3f ef       	ldi	r19, 0xFF	; 255
 192:	41 ee       	ldi	r20, 0xE1	; 225
 194:	84 e0       	ldi	r24, 0x04	; 4
 196:	31 50       	subi	r19, 0x01	; 1
 198:	40 40       	sbci	r20, 0x00	; 0
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0xb0>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0xba>
 1a0:	00 00       	nop
    int8_t reading;
    int8_t readed_signs = 0;
    int8_t signs = 0;
    char val;
    while(1){
        reading = !(PIND&(_BV(BUTTON))); //read_state();
 1a2:	89 b1       	in	r24, 0x09	; 9
 1a4:	84 70       	andi	r24, 0x04	; 4
        if(decoding && !reading){
 1a6:	d1 11       	cpse	r29, r1
 1a8:	e1 cf       	rjmp	.-62     	; 0x16c <main+0x86>
            count_time = 0;
            first_time = 1;
            decoding = 0;
        }
        if(!reading ){
 1aa:	91 f0       	breq	.+36     	; 0x1d0 <main+0xea>
            // count_time 
            LED_PORT &= ~_BV(LED);
 1ac:	2d 98       	cbi	0x05, 5	; 5
                first_time = 0;
                if(readed_signs < 4){
                signs |= (long_sign*(_BV(readed_signs)));
                readed_signs ++;}
            }
            else count_time++;
 1ae:	cf 5f       	subi	r28, 0xFF	; 255
            if(count_time == 8){
 1b0:	c8 30       	cpi	r28, 0x08	; 8
 1b2:	71 f7       	brne	.-36     	; 0x190 <main+0xaa>

#define BAUD 9600                          // baudrate
#define UBRR_VALUE ((F_CPU)/16/(BAUD)-1)   // zgodnie ze wzorem

static inline char decode(int8_t len, int8_t sign){
    if(len == 1){
 1b4:	91 30       	cpi	r25, 0x01	; 1
 1b6:	e9 f0       	breq	.+58     	; 0x1f2 <main+0x10c>
        if(sign&1) return 'T';
        return 'E';
    }
    else if(len == 2){
 1b8:	92 30       	cpi	r25, 0x02	; 2
 1ba:	d9 f1       	breq	.+118    	; 0x232 <main+0x14c>
        else{
            if(sign&2) return 'A';
            else return 'I';
        }
    }
    else if(len == 3){
 1bc:	93 30       	cpi	r25, 0x03	; 3
 1be:	09 f4       	brne	.+2      	; 0x1c2 <main+0xdc>
 1c0:	3e c0       	rjmp	.+124    	; 0x23e <main+0x158>
                if(sign&4) return 'U';
                else return 'S';
            }
        }
    }
    else if(len == 4){
 1c2:	94 30       	cpi	r25, 0x04	; 4
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <main+0xe2>
 1c6:	43 c0       	rjmp	.+134    	; 0x24e <main+0x168>
                readed_signs ++;}
            }
            else count_time++;
            if(count_time == 8){
                val = decode(readed_signs,signs);
                if(readed_signs != 0)printf("%c:\tlen:%"PRId8"\tval:%"PRId8"\r\n",val,readed_signs,signs);
 1c8:	91 11       	cpse	r25, r1
 1ca:	57 c0       	rjmp	.+174    	; 0x27a <main+0x194>
                readed_signs = 0;
                signs = 0;
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	e0 cf       	rjmp	.-64     	; 0x190 <main+0xaa>
        }
        else if(reading){
            if(decoding == 0) first_time = 1;
            decoding = 1;
            if(first_time){
                if(count_time != 8){
 1d0:	c8 30       	cpi	r28, 0x08	; 8
 1d2:	11 f0       	breq	.+4      	; 0x1d8 <main+0xf2>
                    LED_PORT &= ~_BV(LED);
 1d4:	2d 98       	cbi	0x05, 5	; 5
                    long_sign = 0;
 1d6:	f1 2c       	mov	r15, r1
            }
            if(count_time == 0xff) count_time --;
        }
        else if(reading){
            if(decoding == 0) first_time = 1;
            decoding = 1;
 1d8:	d1 e0       	ldi	r29, 0x01	; 1
 1da:	c0 e0       	ldi	r28, 0x00	; 0
 1dc:	d9 cf       	rjmp	.-78     	; 0x190 <main+0xaa>
                    long_sign = 0;
                }
                count_time = 0;
                first_time = 0;
            }
            else count_time++;
 1de:	cf 5f       	subi	r28, 0xFF	; 255
            if(count_time == 8)
 1e0:	c8 30       	cpi	r28, 0x08	; 8
 1e2:	29 f4       	brne	.+10     	; 0x1ee <main+0x108>
            {
                long_sign = 1;
                LED_PORT |= _BV(LED);
 1e4:	2d 9a       	sbi	0x05, 5	; 5
            }
            if(count_time == 0xff) count_time --;
        }
        else if(reading){
            if(decoding == 0) first_time = 1;
            decoding = 1;
 1e6:	d1 e0       	ldi	r29, 0x01	; 1
                first_time = 0;
            }
            else count_time++;
            if(count_time == 8)
            {
                long_sign = 1;
 1e8:	ff 24       	eor	r15, r15
 1ea:	f3 94       	inc	r15
 1ec:	d1 cf       	rjmp	.-94     	; 0x190 <main+0xaa>
            }
            if(count_time == 0xff) count_time --;
        }
        else if(reading){
            if(decoding == 0) first_time = 1;
            decoding = 1;
 1ee:	d1 e0       	ldi	r29, 0x01	; 1
 1f0:	cf cf       	rjmp	.-98     	; 0x190 <main+0xaa>
#define BAUD 9600                          // baudrate
#define UBRR_VALUE ((F_CPU)/16/(BAUD)-1)   // zgodnie ze wzorem

static inline char decode(int8_t len, int8_t sign){
    if(len == 1){
        if(sign&1) return 'T';
 1f2:	20 ff       	sbrs	r18, 0
 1f4:	46 c0       	rjmp	.+140    	; 0x282 <main+0x19c>
 1f6:	84 e5       	ldi	r24, 0x54	; 84
                readed_signs ++;}
            }
            else count_time++;
            if(count_time == 8){
                val = decode(readed_signs,signs);
                if(readed_signs != 0)printf("%c:\tlen:%"PRId8"\tval:%"PRId8"\r\n",val,readed_signs,signs);
 1f8:	42 2f       	mov	r20, r18
 1fa:	02 2e       	mov	r0, r18
 1fc:	00 0c       	add	r0, r0
 1fe:	55 0b       	sbc	r21, r21
 200:	5f 93       	push	r21
 202:	2f 93       	push	r18
 204:	29 2f       	mov	r18, r25
 206:	09 2e       	mov	r0, r25
 208:	00 0c       	add	r0, r0
 20a:	33 0b       	sbc	r19, r19
 20c:	3f 93       	push	r19
 20e:	9f 93       	push	r25
 210:	1f 92       	push	r1
 212:	8f 93       	push	r24
 214:	1f 93       	push	r17
 216:	0f 93       	push	r16
 218:	0e 94 75 01 	call	0x2ea	; 0x2ea <printf>
 21c:	8d b7       	in	r24, 0x3d	; 61
 21e:	9e b7       	in	r25, 0x3e	; 62
 220:	08 96       	adiw	r24, 0x08	; 8
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	9e bf       	out	0x3e, r25	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	8d bf       	out	0x3d, r24	; 61
                readed_signs = 0;
                signs = 0;
 22c:	20 e0       	ldi	r18, 0x00	; 0
            }
            else count_time++;
            if(count_time == 8){
                val = decode(readed_signs,signs);
                if(readed_signs != 0)printf("%c:\tlen:%"PRId8"\tval:%"PRId8"\r\n",val,readed_signs,signs);
                readed_signs = 0;
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	af cf       	rjmp	.-162    	; 0x190 <main+0xaa>
    if(len == 1){
        if(sign&1) return 'T';
        return 'E';
    }
    else if(len == 2){
        if(sign&1){
 232:	20 ff       	sbrs	r18, 0
 234:	28 c0       	rjmp	.+80     	; 0x286 <main+0x1a0>
            if(sign&2) return 'M';
 236:	21 ff       	sbrs	r18, 1
 238:	30 c0       	rjmp	.+96     	; 0x29a <main+0x1b4>
 23a:	8d e4       	ldi	r24, 0x4D	; 77
 23c:	dd cf       	rjmp	.-70     	; 0x1f8 <main+0x112>
            if(sign&2) return 'A';
            else return 'I';
        }
    }
    else if(len == 3){
        if(sign&1){
 23e:	20 ff       	sbrs	r18, 0
 240:	26 c0       	rjmp	.+76     	; 0x28e <main+0x1a8>
            if(sign&2){
 242:	21 ff       	sbrs	r18, 1
 244:	2e c0       	rjmp	.+92     	; 0x2a2 <main+0x1bc>
                if(sign&4) return 'O';
 246:	22 ff       	sbrs	r18, 2
 248:	38 c0       	rjmp	.+112    	; 0x2ba <main+0x1d4>
 24a:	8f e4       	ldi	r24, 0x4F	; 79
 24c:	d5 cf       	rjmp	.-86     	; 0x1f8 <main+0x112>
                else return 'S';
            }
        }
    }
    else if(len == 4){
        if(sign == 8+4) return 'Z';
 24e:	2c 30       	cpi	r18, 0x0C	; 12
 250:	81 f1       	breq	.+96     	; 0x2b2 <main+0x1cc>
        if(sign == 8+2+1) return 'Y';
 252:	2b 30       	cpi	r18, 0x0B	; 11
 254:	81 f1       	breq	.+96     	; 0x2b6 <main+0x1d0>
        if(sign == 8+2) return 'C';
 256:	2a 30       	cpi	r18, 0x0A	; 10
 258:	c1 f1       	breq	.+112    	; 0x2ca <main+0x1e4>
        if(sign == 8+1) return 'X';
 25a:	29 30       	cpi	r18, 0x09	; 9
 25c:	c1 f1       	breq	.+112    	; 0x2ce <main+0x1e8>
        if(sign == 8) return 'B';
 25e:	28 30       	cpi	r18, 0x08	; 8
 260:	c1 f1       	breq	.+112    	; 0x2d2 <main+0x1ec>
        if(sign == 7) return 'J';
 262:	27 30       	cpi	r18, 0x07	; 7
 264:	c1 f1       	breq	.+112    	; 0x2d6 <main+0x1f0>
        if(sign == 6) return 'P';
 266:	26 30       	cpi	r18, 0x06	; 6
 268:	c1 f1       	breq	.+112    	; 0x2da <main+0x1f4>
        if(sign == 4) return 'L';
 26a:	24 30       	cpi	r18, 0x04	; 4
 26c:	c1 f1       	breq	.+112    	; 0x2de <main+0x1f8>
        if(sign == 2) return 'F';
 26e:	22 30       	cpi	r18, 0x02	; 2
 270:	c1 f1       	breq	.+112    	; 0x2e2 <main+0x1fc>
        if(sign == 1) return 'V';
 272:	21 30       	cpi	r18, 0x01	; 1
 274:	c1 f1       	breq	.+112    	; 0x2e6 <main+0x200>
        if(sign == 0) return 'H';
 276:	22 23       	and	r18, r18
 278:	11 f0       	breq	.+4      	; 0x27e <main+0x198>
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	bd cf       	rjmp	.-134    	; 0x1f8 <main+0x112>
 27e:	88 e4       	ldi	r24, 0x48	; 72
 280:	bb cf       	rjmp	.-138    	; 0x1f8 <main+0x112>
#define BAUD 9600                          // baudrate
#define UBRR_VALUE ((F_CPU)/16/(BAUD)-1)   // zgodnie ze wzorem

static inline char decode(int8_t len, int8_t sign){
    if(len == 1){
        if(sign&1) return 'T';
 282:	85 e4       	ldi	r24, 0x45	; 69
 284:	b9 cf       	rjmp	.-142    	; 0x1f8 <main+0x112>
        if(sign&1){
            if(sign&2) return 'M';
            else return 'N';
        }
        else{
            if(sign&2) return 'A';
 286:	21 ff       	sbrs	r18, 1
 288:	0a c0       	rjmp	.+20     	; 0x29e <main+0x1b8>
 28a:	81 e4       	ldi	r24, 0x41	; 65
 28c:	b5 cf       	rjmp	.-150    	; 0x1f8 <main+0x112>
                if(sign&4) return 'K';
                else return 'D';
            }
        }
        else{
            if(sign&2){
 28e:	21 ff       	sbrs	r18, 1
 290:	0c c0       	rjmp	.+24     	; 0x2aa <main+0x1c4>
                if(sign&4) return 'W';
 292:	22 ff       	sbrs	r18, 2
 294:	16 c0       	rjmp	.+44     	; 0x2c2 <main+0x1dc>
 296:	87 e5       	ldi	r24, 0x57	; 87
 298:	af cf       	rjmp	.-162    	; 0x1f8 <main+0x112>
        if(sign&1) return 'T';
        return 'E';
    }
    else if(len == 2){
        if(sign&1){
            if(sign&2) return 'M';
 29a:	8e e4       	ldi	r24, 0x4E	; 78
 29c:	ad cf       	rjmp	.-166    	; 0x1f8 <main+0x112>
            else return 'N';
        }
        else{
            if(sign&2) return 'A';
 29e:	89 e4       	ldi	r24, 0x49	; 73
 2a0:	ab cf       	rjmp	.-170    	; 0x1f8 <main+0x112>
            if(sign&2){
                if(sign&4) return 'O';
                else return 'G';
            }
            else{
                if(sign&4) return 'K';
 2a2:	22 ff       	sbrs	r18, 2
 2a4:	10 c0       	rjmp	.+32     	; 0x2c6 <main+0x1e0>
 2a6:	8b e4       	ldi	r24, 0x4B	; 75
 2a8:	a7 cf       	rjmp	.-178    	; 0x1f8 <main+0x112>
            if(sign&2){
                if(sign&4) return 'W';
                else return 'R';
            }
            else{
                if(sign&4) return 'U';
 2aa:	22 ff       	sbrs	r18, 2
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <main+0x1d8>
 2ae:	85 e5       	ldi	r24, 0x55	; 85
 2b0:	a3 cf       	rjmp	.-186    	; 0x1f8 <main+0x112>
                else return 'S';
            }
        }
    }
    else if(len == 4){
        if(sign == 8+4) return 'Z';
 2b2:	8a e5       	ldi	r24, 0x5A	; 90
 2b4:	a1 cf       	rjmp	.-190    	; 0x1f8 <main+0x112>
        if(sign == 8+2+1) return 'Y';
 2b6:	89 e5       	ldi	r24, 0x59	; 89
 2b8:	9f cf       	rjmp	.-194    	; 0x1f8 <main+0x112>
        }
    }
    else if(len == 3){
        if(sign&1){
            if(sign&2){
                if(sign&4) return 'O';
 2ba:	87 e4       	ldi	r24, 0x47	; 71
 2bc:	9d cf       	rjmp	.-198    	; 0x1f8 <main+0x112>
            if(sign&2){
                if(sign&4) return 'W';
                else return 'R';
            }
            else{
                if(sign&4) return 'U';
 2be:	83 e5       	ldi	r24, 0x53	; 83
 2c0:	9b cf       	rjmp	.-202    	; 0x1f8 <main+0x112>
                else return 'D';
            }
        }
        else{
            if(sign&2){
                if(sign&4) return 'W';
 2c2:	82 e5       	ldi	r24, 0x52	; 82
 2c4:	99 cf       	rjmp	.-206    	; 0x1f8 <main+0x112>
            if(sign&2){
                if(sign&4) return 'O';
                else return 'G';
            }
            else{
                if(sign&4) return 'K';
 2c6:	84 e4       	ldi	r24, 0x44	; 68
 2c8:	97 cf       	rjmp	.-210    	; 0x1f8 <main+0x112>
        }
    }
    else if(len == 4){
        if(sign == 8+4) return 'Z';
        if(sign == 8+2+1) return 'Y';
        if(sign == 8+2) return 'C';
 2ca:	83 e4       	ldi	r24, 0x43	; 67
 2cc:	95 cf       	rjmp	.-214    	; 0x1f8 <main+0x112>
        if(sign == 8+1) return 'X';
 2ce:	88 e5       	ldi	r24, 0x58	; 88
 2d0:	93 cf       	rjmp	.-218    	; 0x1f8 <main+0x112>
        if(sign == 8) return 'B';
 2d2:	82 e4       	ldi	r24, 0x42	; 66
 2d4:	91 cf       	rjmp	.-222    	; 0x1f8 <main+0x112>
        if(sign == 7) return 'J';
 2d6:	8a e4       	ldi	r24, 0x4A	; 74
 2d8:	8f cf       	rjmp	.-226    	; 0x1f8 <main+0x112>
        if(sign == 6) return 'P';
 2da:	80 e5       	ldi	r24, 0x50	; 80
 2dc:	8d cf       	rjmp	.-230    	; 0x1f8 <main+0x112>
        if(sign == 4) return 'L';
 2de:	8c e4       	ldi	r24, 0x4C	; 76
 2e0:	8b cf       	rjmp	.-234    	; 0x1f8 <main+0x112>
        if(sign == 2) return 'F';
 2e2:	86 e4       	ldi	r24, 0x46	; 70
 2e4:	89 cf       	rjmp	.-238    	; 0x1f8 <main+0x112>
        if(sign == 1) return 'V';
 2e6:	86 e5       	ldi	r24, 0x56	; 86
 2e8:	87 cf       	rjmp	.-242    	; 0x1f8 <main+0x112>

000002ea <printf>:
 2ea:	a0 e0       	ldi	r26, 0x00	; 0
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	eb e7       	ldi	r30, 0x7B	; 123
 2f0:	f1 e0       	ldi	r31, 0x01	; 1
 2f2:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__prologue_saves__+0x20>
 2f6:	ae 01       	movw	r20, r28
 2f8:	4b 5f       	subi	r20, 0xFB	; 251
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	fa 01       	movw	r30, r20
 2fe:	61 91       	ld	r22, Z+
 300:	71 91       	ld	r23, Z+
 302:	af 01       	movw	r20, r30
 304:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__iob+0x2>
 308:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__iob+0x3>
 30c:	0e 94 bb 01 	call	0x376	; 0x376 <vfprintf>
 310:	e2 e0       	ldi	r30, 0x02	; 2
 312:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__epilogue_restores__+0x20>

00000316 <puts>:
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <__iob+0x2>
 322:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <__iob+0x3>
 326:	23 81       	ldd	r18, Z+3	; 0x03
 328:	21 ff       	sbrs	r18, 1
 32a:	1b c0       	rjmp	.+54     	; 0x362 <puts+0x4c>
 32c:	8c 01       	movw	r16, r24
 32e:	d0 e0       	ldi	r29, 0x00	; 0
 330:	c0 e0       	ldi	r28, 0x00	; 0
 332:	f8 01       	movw	r30, r16
 334:	81 91       	ld	r24, Z+
 336:	8f 01       	movw	r16, r30
 338:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <__iob+0x2>
 33c:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <__iob+0x3>
 340:	db 01       	movw	r26, r22
 342:	18 96       	adiw	r26, 0x08	; 8
 344:	ed 91       	ld	r30, X+
 346:	fc 91       	ld	r31, X
 348:	19 97       	sbiw	r26, 0x09	; 9
 34a:	88 23       	and	r24, r24
 34c:	31 f0       	breq	.+12     	; 0x35a <puts+0x44>
 34e:	09 95       	icall
 350:	89 2b       	or	r24, r25
 352:	79 f3       	breq	.-34     	; 0x332 <puts+0x1c>
 354:	df ef       	ldi	r29, 0xFF	; 255
 356:	cf ef       	ldi	r28, 0xFF	; 255
 358:	ec cf       	rjmp	.-40     	; 0x332 <puts+0x1c>
 35a:	8a e0       	ldi	r24, 0x0A	; 10
 35c:	09 95       	icall
 35e:	89 2b       	or	r24, r25
 360:	19 f0       	breq	.+6      	; 0x368 <puts+0x52>
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	9f ef       	ldi	r25, 0xFF	; 255
 366:	02 c0       	rjmp	.+4      	; 0x36c <puts+0x56>
 368:	8d 2f       	mov	r24, r29
 36a:	9c 2f       	mov	r25, r28
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <vfprintf>:
 376:	ab e0       	ldi	r26, 0x0B	; 11
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	e1 ec       	ldi	r30, 0xC1	; 193
 37c:	f1 e0       	ldi	r31, 0x01	; 1
 37e:	0c 94 4c 04 	jmp	0x898	; 0x898 <__prologue_saves__>
 382:	6c 01       	movw	r12, r24
 384:	7b 01       	movw	r14, r22
 386:	8a 01       	movw	r16, r20
 388:	fc 01       	movw	r30, r24
 38a:	17 82       	std	Z+7, r1	; 0x07
 38c:	16 82       	std	Z+6, r1	; 0x06
 38e:	83 81       	ldd	r24, Z+3	; 0x03
 390:	81 ff       	sbrs	r24, 1
 392:	cc c1       	rjmp	.+920    	; 0x72c <__EEPROM_REGION_LENGTH__+0x32c>
 394:	ce 01       	movw	r24, r28
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	3c 01       	movw	r6, r24
 39a:	f6 01       	movw	r30, r12
 39c:	93 81       	ldd	r25, Z+3	; 0x03
 39e:	f7 01       	movw	r30, r14
 3a0:	93 fd       	sbrc	r25, 3
 3a2:	85 91       	lpm	r24, Z+
 3a4:	93 ff       	sbrs	r25, 3
 3a6:	81 91       	ld	r24, Z+
 3a8:	7f 01       	movw	r14, r30
 3aa:	88 23       	and	r24, r24
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <vfprintf+0x3a>
 3ae:	ba c1       	rjmp	.+884    	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 3b0:	85 32       	cpi	r24, 0x25	; 37
 3b2:	39 f4       	brne	.+14     	; 0x3c2 <vfprintf+0x4c>
 3b4:	93 fd       	sbrc	r25, 3
 3b6:	85 91       	lpm	r24, Z+
 3b8:	93 ff       	sbrs	r25, 3
 3ba:	81 91       	ld	r24, Z+
 3bc:	7f 01       	movw	r14, r30
 3be:	85 32       	cpi	r24, 0x25	; 37
 3c0:	29 f4       	brne	.+10     	; 0x3cc <vfprintf+0x56>
 3c2:	b6 01       	movw	r22, r12
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 3ca:	e7 cf       	rjmp	.-50     	; 0x39a <vfprintf+0x24>
 3cc:	91 2c       	mov	r9, r1
 3ce:	21 2c       	mov	r2, r1
 3d0:	31 2c       	mov	r3, r1
 3d2:	ff e1       	ldi	r31, 0x1F	; 31
 3d4:	f3 15       	cp	r31, r3
 3d6:	d8 f0       	brcs	.+54     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3d8:	8b 32       	cpi	r24, 0x2B	; 43
 3da:	79 f0       	breq	.+30     	; 0x3fa <vfprintf+0x84>
 3dc:	38 f4       	brcc	.+14     	; 0x3ec <vfprintf+0x76>
 3de:	80 32       	cpi	r24, 0x20	; 32
 3e0:	79 f0       	breq	.+30     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e2:	83 32       	cpi	r24, 0x23	; 35
 3e4:	a1 f4       	brne	.+40     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3e6:	23 2d       	mov	r18, r3
 3e8:	20 61       	ori	r18, 0x10	; 16
 3ea:	1d c0       	rjmp	.+58     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3ec:	8d 32       	cpi	r24, 0x2D	; 45
 3ee:	61 f0       	breq	.+24     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f0:	80 33       	cpi	r24, 0x30	; 48
 3f2:	69 f4       	brne	.+26     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3f4:	23 2d       	mov	r18, r3
 3f6:	21 60       	ori	r18, 0x01	; 1
 3f8:	16 c0       	rjmp	.+44     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 3fa:	83 2d       	mov	r24, r3
 3fc:	82 60       	ori	r24, 0x02	; 2
 3fe:	38 2e       	mov	r3, r24
 400:	e3 2d       	mov	r30, r3
 402:	e4 60       	ori	r30, 0x04	; 4
 404:	3e 2e       	mov	r3, r30
 406:	2a c0       	rjmp	.+84     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 408:	f3 2d       	mov	r31, r3
 40a:	f8 60       	ori	r31, 0x08	; 8
 40c:	1d c0       	rjmp	.+58     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 40e:	37 fc       	sbrc	r3, 7
 410:	2d c0       	rjmp	.+90     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 412:	20 ed       	ldi	r18, 0xD0	; 208
 414:	28 0f       	add	r18, r24
 416:	2a 30       	cpi	r18, 0x0A	; 10
 418:	40 f0       	brcs	.+16     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 41a:	8e 32       	cpi	r24, 0x2E	; 46
 41c:	b9 f4       	brne	.+46     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 41e:	36 fc       	sbrc	r3, 6
 420:	81 c1       	rjmp	.+770    	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 422:	23 2d       	mov	r18, r3
 424:	20 64       	ori	r18, 0x40	; 64
 426:	32 2e       	mov	r3, r18
 428:	19 c0       	rjmp	.+50     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 42a:	36 fe       	sbrs	r3, 6
 42c:	06 c0       	rjmp	.+12     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 42e:	8a e0       	ldi	r24, 0x0A	; 10
 430:	98 9e       	mul	r9, r24
 432:	20 0d       	add	r18, r0
 434:	11 24       	eor	r1, r1
 436:	92 2e       	mov	r9, r18
 438:	11 c0       	rjmp	.+34     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 43a:	ea e0       	ldi	r30, 0x0A	; 10
 43c:	2e 9e       	mul	r2, r30
 43e:	20 0d       	add	r18, r0
 440:	11 24       	eor	r1, r1
 442:	22 2e       	mov	r2, r18
 444:	f3 2d       	mov	r31, r3
 446:	f0 62       	ori	r31, 0x20	; 32
 448:	3f 2e       	mov	r3, r31
 44a:	08 c0       	rjmp	.+16     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 44c:	8c 36       	cpi	r24, 0x6C	; 108
 44e:	21 f4       	brne	.+8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 450:	83 2d       	mov	r24, r3
 452:	80 68       	ori	r24, 0x80	; 128
 454:	38 2e       	mov	r3, r24
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 36       	cpi	r24, 0x68	; 104
 45a:	41 f4       	brne	.+16     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45c:	f7 01       	movw	r30, r14
 45e:	93 fd       	sbrc	r25, 3
 460:	85 91       	lpm	r24, Z+
 462:	93 ff       	sbrs	r25, 3
 464:	81 91       	ld	r24, Z+
 466:	7f 01       	movw	r14, r30
 468:	81 11       	cpse	r24, r1
 46a:	b3 cf       	rjmp	.-154    	; 0x3d2 <vfprintf+0x5c>
 46c:	98 2f       	mov	r25, r24
 46e:	9f 7d       	andi	r25, 0xDF	; 223
 470:	95 54       	subi	r25, 0x45	; 69
 472:	93 30       	cpi	r25, 0x03	; 3
 474:	28 f4       	brcc	.+10     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 476:	0c 5f       	subi	r16, 0xFC	; 252
 478:	1f 4f       	sbci	r17, 0xFF	; 255
 47a:	9f e3       	ldi	r25, 0x3F	; 63
 47c:	99 83       	std	Y+1, r25	; 0x01
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 480:	83 36       	cpi	r24, 0x63	; 99
 482:	31 f0       	breq	.+12     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 484:	83 37       	cpi	r24, 0x73	; 115
 486:	71 f0       	breq	.+28     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 488:	83 35       	cpi	r24, 0x53	; 83
 48a:	09 f0       	breq	.+2      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 48c:	59 c0       	rjmp	.+178    	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 48e:	21 c0       	rjmp	.+66     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 490:	f8 01       	movw	r30, r16
 492:	80 81       	ld	r24, Z
 494:	89 83       	std	Y+1, r24	; 0x01
 496:	0e 5f       	subi	r16, 0xFE	; 254
 498:	1f 4f       	sbci	r17, 0xFF	; 255
 49a:	88 24       	eor	r8, r8
 49c:	83 94       	inc	r8
 49e:	91 2c       	mov	r9, r1
 4a0:	53 01       	movw	r10, r6
 4a2:	13 c0       	rjmp	.+38     	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4a4:	28 01       	movw	r4, r16
 4a6:	f2 e0       	ldi	r31, 0x02	; 2
 4a8:	4f 0e       	add	r4, r31
 4aa:	51 1c       	adc	r5, r1
 4ac:	f8 01       	movw	r30, r16
 4ae:	a0 80       	ld	r10, Z
 4b0:	b1 80       	ldd	r11, Z+1	; 0x01
 4b2:	36 fe       	sbrs	r3, 6
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b6:	69 2d       	mov	r22, r9
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 4bc:	6f ef       	ldi	r22, 0xFF	; 255
 4be:	7f ef       	ldi	r23, 0xFF	; 255
 4c0:	c5 01       	movw	r24, r10
 4c2:	0e 94 a7 03 	call	0x74e	; 0x74e <strnlen>
 4c6:	4c 01       	movw	r8, r24
 4c8:	82 01       	movw	r16, r4
 4ca:	f3 2d       	mov	r31, r3
 4cc:	ff 77       	andi	r31, 0x7F	; 127
 4ce:	3f 2e       	mov	r3, r31
 4d0:	16 c0       	rjmp	.+44     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4d2:	28 01       	movw	r4, r16
 4d4:	22 e0       	ldi	r18, 0x02	; 2
 4d6:	42 0e       	add	r4, r18
 4d8:	51 1c       	adc	r5, r1
 4da:	f8 01       	movw	r30, r16
 4dc:	a0 80       	ld	r10, Z
 4de:	b1 80       	ldd	r11, Z+1	; 0x01
 4e0:	36 fe       	sbrs	r3, 6
 4e2:	03 c0       	rjmp	.+6      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4e4:	69 2d       	mov	r22, r9
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ea:	6f ef       	ldi	r22, 0xFF	; 255
 4ec:	7f ef       	ldi	r23, 0xFF	; 255
 4ee:	c5 01       	movw	r24, r10
 4f0:	0e 94 9c 03 	call	0x738	; 0x738 <strnlen_P>
 4f4:	4c 01       	movw	r8, r24
 4f6:	f3 2d       	mov	r31, r3
 4f8:	f0 68       	ori	r31, 0x80	; 128
 4fa:	3f 2e       	mov	r3, r31
 4fc:	82 01       	movw	r16, r4
 4fe:	33 fc       	sbrc	r3, 3
 500:	1b c0       	rjmp	.+54     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 502:	82 2d       	mov	r24, r2
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	88 16       	cp	r8, r24
 508:	99 06       	cpc	r9, r25
 50a:	b0 f4       	brcc	.+44     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 50c:	b6 01       	movw	r22, r12
 50e:	80 e2       	ldi	r24, 0x20	; 32
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 516:	2a 94       	dec	r2
 518:	f4 cf       	rjmp	.-24     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 51a:	f5 01       	movw	r30, r10
 51c:	37 fc       	sbrc	r3, 7
 51e:	85 91       	lpm	r24, Z+
 520:	37 fe       	sbrs	r3, 7
 522:	81 91       	ld	r24, Z+
 524:	5f 01       	movw	r10, r30
 526:	b6 01       	movw	r22, r12
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 52e:	21 10       	cpse	r2, r1
 530:	2a 94       	dec	r2
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	82 1a       	sub	r8, r18
 536:	91 08       	sbc	r9, r1
 538:	81 14       	cp	r8, r1
 53a:	91 04       	cpc	r9, r1
 53c:	71 f7       	brne	.-36     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 53e:	e8 c0       	rjmp	.+464    	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 540:	84 36       	cpi	r24, 0x64	; 100
 542:	11 f0       	breq	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	89 36       	cpi	r24, 0x69	; 105
 546:	41 f5       	brne	.+80     	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 548:	f8 01       	movw	r30, r16
 54a:	37 fe       	sbrs	r3, 7
 54c:	07 c0       	rjmp	.+14     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 54e:	60 81       	ld	r22, Z
 550:	71 81       	ldd	r23, Z+1	; 0x01
 552:	82 81       	ldd	r24, Z+2	; 0x02
 554:	93 81       	ldd	r25, Z+3	; 0x03
 556:	0c 5f       	subi	r16, 0xFC	; 252
 558:	1f 4f       	sbci	r17, 0xFF	; 255
 55a:	08 c0       	rjmp	.+16     	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
 55c:	60 81       	ld	r22, Z
 55e:	71 81       	ldd	r23, Z+1	; 0x01
 560:	07 2e       	mov	r0, r23
 562:	00 0c       	add	r0, r0
 564:	88 0b       	sbc	r24, r24
 566:	99 0b       	sbc	r25, r25
 568:	0e 5f       	subi	r16, 0xFE	; 254
 56a:	1f 4f       	sbci	r17, 0xFF	; 255
 56c:	f3 2d       	mov	r31, r3
 56e:	ff 76       	andi	r31, 0x6F	; 111
 570:	3f 2e       	mov	r3, r31
 572:	97 ff       	sbrs	r25, 7
 574:	09 c0       	rjmp	.+18     	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 576:	90 95       	com	r25
 578:	80 95       	com	r24
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	8f 4f       	sbci	r24, 0xFF	; 255
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	f0 68       	ori	r31, 0x80	; 128
 586:	3f 2e       	mov	r3, r31
 588:	2a e0       	ldi	r18, 0x0A	; 10
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	a3 01       	movw	r20, r6
 58e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ultoa_invert>
 592:	88 2e       	mov	r8, r24
 594:	86 18       	sub	r8, r6
 596:	45 c0       	rjmp	.+138    	; 0x622 <__EEPROM_REGION_LENGTH__+0x222>
 598:	85 37       	cpi	r24, 0x75	; 117
 59a:	31 f4       	brne	.+12     	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 59c:	23 2d       	mov	r18, r3
 59e:	2f 7e       	andi	r18, 0xEF	; 239
 5a0:	b2 2e       	mov	r11, r18
 5a2:	2a e0       	ldi	r18, 0x0A	; 10
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	25 c0       	rjmp	.+74     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5a8:	93 2d       	mov	r25, r3
 5aa:	99 7f       	andi	r25, 0xF9	; 249
 5ac:	b9 2e       	mov	r11, r25
 5ae:	8f 36       	cpi	r24, 0x6F	; 111
 5b0:	c1 f0       	breq	.+48     	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
 5b2:	18 f4       	brcc	.+6      	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 5b4:	88 35       	cpi	r24, 0x58	; 88
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 5b8:	b5 c0       	rjmp	.+362    	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 5ba:	80 37       	cpi	r24, 0x70	; 112
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
 5be:	88 37       	cpi	r24, 0x78	; 120
 5c0:	21 f0       	breq	.+8      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
 5c2:	b0 c0       	rjmp	.+352    	; 0x724 <__EEPROM_REGION_LENGTH__+0x324>
 5c4:	e9 2f       	mov	r30, r25
 5c6:	e0 61       	ori	r30, 0x10	; 16
 5c8:	be 2e       	mov	r11, r30
 5ca:	b4 fe       	sbrs	r11, 4
 5cc:	0d c0       	rjmp	.+26     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 5ce:	fb 2d       	mov	r31, r11
 5d0:	f4 60       	ori	r31, 0x04	; 4
 5d2:	bf 2e       	mov	r11, r31
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 5d6:	34 fe       	sbrs	r3, 4
 5d8:	0a c0       	rjmp	.+20     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
 5da:	29 2f       	mov	r18, r25
 5dc:	26 60       	ori	r18, 0x06	; 6
 5de:	b2 2e       	mov	r11, r18
 5e0:	06 c0       	rjmp	.+12     	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
 5e2:	28 e0       	ldi	r18, 0x08	; 8
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	05 c0       	rjmp	.+10     	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5e8:	20 e1       	ldi	r18, 0x10	; 16
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <__EEPROM_REGION_LENGTH__+0x1f2>
 5ee:	20 e1       	ldi	r18, 0x10	; 16
 5f0:	32 e0       	ldi	r19, 0x02	; 2
 5f2:	f8 01       	movw	r30, r16
 5f4:	b7 fe       	sbrs	r11, 7
 5f6:	07 c0       	rjmp	.+14     	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
 5f8:	60 81       	ld	r22, Z
 5fa:	71 81       	ldd	r23, Z+1	; 0x01
 5fc:	82 81       	ldd	r24, Z+2	; 0x02
 5fe:	93 81       	ldd	r25, Z+3	; 0x03
 600:	0c 5f       	subi	r16, 0xFC	; 252
 602:	1f 4f       	sbci	r17, 0xFF	; 255
 604:	06 c0       	rjmp	.+12     	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
 606:	60 81       	ld	r22, Z
 608:	71 81       	ldd	r23, Z+1	; 0x01
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 5f       	subi	r16, 0xFE	; 254
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	a3 01       	movw	r20, r6
 614:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__ultoa_invert>
 618:	88 2e       	mov	r8, r24
 61a:	86 18       	sub	r8, r6
 61c:	fb 2d       	mov	r31, r11
 61e:	ff 77       	andi	r31, 0x7F	; 127
 620:	3f 2e       	mov	r3, r31
 622:	36 fe       	sbrs	r3, 6
 624:	0d c0       	rjmp	.+26     	; 0x640 <__EEPROM_REGION_LENGTH__+0x240>
 626:	23 2d       	mov	r18, r3
 628:	2e 7f       	andi	r18, 0xFE	; 254
 62a:	a2 2e       	mov	r10, r18
 62c:	89 14       	cp	r8, r9
 62e:	58 f4       	brcc	.+22     	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 630:	34 fe       	sbrs	r3, 4
 632:	0b c0       	rjmp	.+22     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 634:	32 fc       	sbrc	r3, 2
 636:	09 c0       	rjmp	.+18     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 638:	83 2d       	mov	r24, r3
 63a:	8e 7e       	andi	r24, 0xEE	; 238
 63c:	a8 2e       	mov	r10, r24
 63e:	05 c0       	rjmp	.+10     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
 640:	b8 2c       	mov	r11, r8
 642:	a3 2c       	mov	r10, r3
 644:	03 c0       	rjmp	.+6      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
 646:	b8 2c       	mov	r11, r8
 648:	01 c0       	rjmp	.+2      	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
 64a:	b9 2c       	mov	r11, r9
 64c:	a4 fe       	sbrs	r10, 4
 64e:	0f c0       	rjmp	.+30     	; 0x66e <__EEPROM_REGION_LENGTH__+0x26e>
 650:	fe 01       	movw	r30, r28
 652:	e8 0d       	add	r30, r8
 654:	f1 1d       	adc	r31, r1
 656:	80 81       	ld	r24, Z
 658:	80 33       	cpi	r24, 0x30	; 48
 65a:	21 f4       	brne	.+8      	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
 65c:	9a 2d       	mov	r25, r10
 65e:	99 7e       	andi	r25, 0xE9	; 233
 660:	a9 2e       	mov	r10, r25
 662:	09 c0       	rjmp	.+18     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 664:	a2 fe       	sbrs	r10, 2
 666:	06 c0       	rjmp	.+12     	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
 668:	b3 94       	inc	r11
 66a:	b3 94       	inc	r11
 66c:	04 c0       	rjmp	.+8      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 66e:	8a 2d       	mov	r24, r10
 670:	86 78       	andi	r24, 0x86	; 134
 672:	09 f0       	breq	.+2      	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
 674:	b3 94       	inc	r11
 676:	a3 fc       	sbrc	r10, 3
 678:	11 c0       	rjmp	.+34     	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
 67a:	a0 fe       	sbrs	r10, 0
 67c:	06 c0       	rjmp	.+12     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 67e:	b2 14       	cp	r11, r2
 680:	88 f4       	brcc	.+34     	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
 682:	28 0c       	add	r2, r8
 684:	92 2c       	mov	r9, r2
 686:	9b 18       	sub	r9, r11
 688:	0e c0       	rjmp	.+28     	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
 68a:	b2 14       	cp	r11, r2
 68c:	60 f4       	brcc	.+24     	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
 68e:	b6 01       	movw	r22, r12
 690:	80 e2       	ldi	r24, 0x20	; 32
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 698:	b3 94       	inc	r11
 69a:	f7 cf       	rjmp	.-18     	; 0x68a <__EEPROM_REGION_LENGTH__+0x28a>
 69c:	b2 14       	cp	r11, r2
 69e:	18 f4       	brcc	.+6      	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
 6a0:	2b 18       	sub	r2, r11
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
 6a4:	98 2c       	mov	r9, r8
 6a6:	21 2c       	mov	r2, r1
 6a8:	a4 fe       	sbrs	r10, 4
 6aa:	10 c0       	rjmp	.+32     	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
 6ac:	b6 01       	movw	r22, r12
 6ae:	80 e3       	ldi	r24, 0x30	; 48
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 6b6:	a2 fe       	sbrs	r10, 2
 6b8:	17 c0       	rjmp	.+46     	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 6ba:	a1 fc       	sbrc	r10, 1
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <__EEPROM_REGION_LENGTH__+0x2c4>
 6be:	88 e7       	ldi	r24, 0x78	; 120
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
 6c4:	88 e5       	ldi	r24, 0x58	; 88
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	b6 01       	movw	r22, r12
 6ca:	0c c0       	rjmp	.+24     	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
 6cc:	8a 2d       	mov	r24, r10
 6ce:	86 78       	andi	r24, 0x86	; 134
 6d0:	59 f0       	breq	.+22     	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 6d2:	a1 fe       	sbrs	r10, 1
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <__EEPROM_REGION_LENGTH__+0x2da>
 6d6:	8b e2       	ldi	r24, 0x2B	; 43
 6d8:	01 c0       	rjmp	.+2      	; 0x6dc <__EEPROM_REGION_LENGTH__+0x2dc>
 6da:	80 e2       	ldi	r24, 0x20	; 32
 6dc:	a7 fc       	sbrc	r10, 7
 6de:	8d e2       	ldi	r24, 0x2D	; 45
 6e0:	b6 01       	movw	r22, r12
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 6e8:	89 14       	cp	r8, r9
 6ea:	38 f4       	brcc	.+14     	; 0x6fa <__EEPROM_REGION_LENGTH__+0x2fa>
 6ec:	b6 01       	movw	r22, r12
 6ee:	80 e3       	ldi	r24, 0x30	; 48
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 6f6:	9a 94       	dec	r9
 6f8:	f7 cf       	rjmp	.-18     	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 6fa:	8a 94       	dec	r8
 6fc:	f3 01       	movw	r30, r6
 6fe:	e8 0d       	add	r30, r8
 700:	f1 1d       	adc	r31, r1
 702:	80 81       	ld	r24, Z
 704:	b6 01       	movw	r22, r12
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 70c:	81 10       	cpse	r8, r1
 70e:	f5 cf       	rjmp	.-22     	; 0x6fa <__EEPROM_REGION_LENGTH__+0x2fa>
 710:	22 20       	and	r2, r2
 712:	09 f4       	brne	.+2      	; 0x716 <__EEPROM_REGION_LENGTH__+0x316>
 714:	42 ce       	rjmp	.-892    	; 0x39a <vfprintf+0x24>
 716:	b6 01       	movw	r22, r12
 718:	80 e2       	ldi	r24, 0x20	; 32
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 b2 03 	call	0x764	; 0x764 <fputc>
 720:	2a 94       	dec	r2
 722:	f6 cf       	rjmp	.-20     	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 724:	f6 01       	movw	r30, r12
 726:	86 81       	ldd	r24, Z+6	; 0x06
 728:	97 81       	ldd	r25, Z+7	; 0x07
 72a:	02 c0       	rjmp	.+4      	; 0x730 <__EEPROM_REGION_LENGTH__+0x330>
 72c:	8f ef       	ldi	r24, 0xFF	; 255
 72e:	9f ef       	ldi	r25, 0xFF	; 255
 730:	2b 96       	adiw	r28, 0x0b	; 11
 732:	e2 e1       	ldi	r30, 0x12	; 18
 734:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__epilogue_restores__>

00000738 <strnlen_P>:
 738:	fc 01       	movw	r30, r24
 73a:	05 90       	lpm	r0, Z+
 73c:	61 50       	subi	r22, 0x01	; 1
 73e:	70 40       	sbci	r23, 0x00	; 0
 740:	01 10       	cpse	r0, r1
 742:	d8 f7       	brcc	.-10     	; 0x73a <strnlen_P+0x2>
 744:	80 95       	com	r24
 746:	90 95       	com	r25
 748:	8e 0f       	add	r24, r30
 74a:	9f 1f       	adc	r25, r31
 74c:	08 95       	ret

0000074e <strnlen>:
 74e:	fc 01       	movw	r30, r24
 750:	61 50       	subi	r22, 0x01	; 1
 752:	70 40       	sbci	r23, 0x00	; 0
 754:	01 90       	ld	r0, Z+
 756:	01 10       	cpse	r0, r1
 758:	d8 f7       	brcc	.-10     	; 0x750 <strnlen+0x2>
 75a:	80 95       	com	r24
 75c:	90 95       	com	r25
 75e:	8e 0f       	add	r24, r30
 760:	9f 1f       	adc	r25, r31
 762:	08 95       	ret

00000764 <fputc>:
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	fb 01       	movw	r30, r22
 76e:	23 81       	ldd	r18, Z+3	; 0x03
 770:	21 fd       	sbrc	r18, 1
 772:	03 c0       	rjmp	.+6      	; 0x77a <fputc+0x16>
 774:	8f ef       	ldi	r24, 0xFF	; 255
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	2c c0       	rjmp	.+88     	; 0x7d2 <fputc+0x6e>
 77a:	22 ff       	sbrs	r18, 2
 77c:	16 c0       	rjmp	.+44     	; 0x7aa <fputc+0x46>
 77e:	46 81       	ldd	r20, Z+6	; 0x06
 780:	57 81       	ldd	r21, Z+7	; 0x07
 782:	24 81       	ldd	r18, Z+4	; 0x04
 784:	35 81       	ldd	r19, Z+5	; 0x05
 786:	42 17       	cp	r20, r18
 788:	53 07       	cpc	r21, r19
 78a:	44 f4       	brge	.+16     	; 0x79c <fputc+0x38>
 78c:	a0 81       	ld	r26, Z
 78e:	b1 81       	ldd	r27, Z+1	; 0x01
 790:	9d 01       	movw	r18, r26
 792:	2f 5f       	subi	r18, 0xFF	; 255
 794:	3f 4f       	sbci	r19, 0xFF	; 255
 796:	31 83       	std	Z+1, r19	; 0x01
 798:	20 83       	st	Z, r18
 79a:	8c 93       	st	X, r24
 79c:	26 81       	ldd	r18, Z+6	; 0x06
 79e:	37 81       	ldd	r19, Z+7	; 0x07
 7a0:	2f 5f       	subi	r18, 0xFF	; 255
 7a2:	3f 4f       	sbci	r19, 0xFF	; 255
 7a4:	37 83       	std	Z+7, r19	; 0x07
 7a6:	26 83       	std	Z+6, r18	; 0x06
 7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <fputc+0x6e>
 7aa:	8b 01       	movw	r16, r22
 7ac:	ec 01       	movw	r28, r24
 7ae:	fb 01       	movw	r30, r22
 7b0:	00 84       	ldd	r0, Z+8	; 0x08
 7b2:	f1 85       	ldd	r31, Z+9	; 0x09
 7b4:	e0 2d       	mov	r30, r0
 7b6:	09 95       	icall
 7b8:	89 2b       	or	r24, r25
 7ba:	e1 f6       	brne	.-72     	; 0x774 <fputc+0x10>
 7bc:	d8 01       	movw	r26, r16
 7be:	16 96       	adiw	r26, 0x06	; 6
 7c0:	8d 91       	ld	r24, X+
 7c2:	9c 91       	ld	r25, X
 7c4:	17 97       	sbiw	r26, 0x07	; 7
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	17 96       	adiw	r26, 0x07	; 7
 7ca:	9c 93       	st	X, r25
 7cc:	8e 93       	st	-X, r24
 7ce:	16 97       	sbiw	r26, 0x06	; 6
 7d0:	ce 01       	movw	r24, r28
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	08 95       	ret

000007dc <__ultoa_invert>:
 7dc:	fa 01       	movw	r30, r20
 7de:	aa 27       	eor	r26, r26
 7e0:	28 30       	cpi	r18, 0x08	; 8
 7e2:	51 f1       	breq	.+84     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 7e4:	20 31       	cpi	r18, 0x10	; 16
 7e6:	81 f1       	breq	.+96     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7e8:	e8 94       	clt
 7ea:	6f 93       	push	r22
 7ec:	6e 7f       	andi	r22, 0xFE	; 254
 7ee:	6e 5f       	subi	r22, 0xFE	; 254
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	8f 4f       	sbci	r24, 0xFF	; 255
 7f4:	9f 4f       	sbci	r25, 0xFF	; 255
 7f6:	af 4f       	sbci	r26, 0xFF	; 255
 7f8:	b1 e0       	ldi	r27, 0x01	; 1
 7fa:	3e d0       	rcall	.+124    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 7fc:	b4 e0       	ldi	r27, 0x04	; 4
 7fe:	3c d0       	rcall	.+120    	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 800:	67 0f       	add	r22, r23
 802:	78 1f       	adc	r23, r24
 804:	89 1f       	adc	r24, r25
 806:	9a 1f       	adc	r25, r26
 808:	a1 1d       	adc	r26, r1
 80a:	68 0f       	add	r22, r24
 80c:	79 1f       	adc	r23, r25
 80e:	8a 1f       	adc	r24, r26
 810:	91 1d       	adc	r25, r1
 812:	a1 1d       	adc	r26, r1
 814:	6a 0f       	add	r22, r26
 816:	71 1d       	adc	r23, r1
 818:	81 1d       	adc	r24, r1
 81a:	91 1d       	adc	r25, r1
 81c:	a1 1d       	adc	r26, r1
 81e:	20 d0       	rcall	.+64     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 820:	09 f4       	brne	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 822:	68 94       	set
 824:	3f 91       	pop	r19
 826:	2a e0       	ldi	r18, 0x0A	; 10
 828:	26 9f       	mul	r18, r22
 82a:	11 24       	eor	r1, r1
 82c:	30 19       	sub	r19, r0
 82e:	30 5d       	subi	r19, 0xD0	; 208
 830:	31 93       	st	Z+, r19
 832:	de f6       	brtc	.-74     	; 0x7ea <__ultoa_invert+0xe>
 834:	cf 01       	movw	r24, r30
 836:	08 95       	ret
 838:	46 2f       	mov	r20, r22
 83a:	47 70       	andi	r20, 0x07	; 7
 83c:	40 5d       	subi	r20, 0xD0	; 208
 83e:	41 93       	st	Z+, r20
 840:	b3 e0       	ldi	r27, 0x03	; 3
 842:	0f d0       	rcall	.+30     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 844:	c9 f7       	brne	.-14     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 846:	f6 cf       	rjmp	.-20     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 848:	46 2f       	mov	r20, r22
 84a:	4f 70       	andi	r20, 0x0F	; 15
 84c:	40 5d       	subi	r20, 0xD0	; 208
 84e:	4a 33       	cpi	r20, 0x3A	; 58
 850:	18 f0       	brcs	.+6      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 852:	49 5d       	subi	r20, 0xD9	; 217
 854:	31 fd       	sbrc	r19, 1
 856:	40 52       	subi	r20, 0x20	; 32
 858:	41 93       	st	Z+, r20
 85a:	02 d0       	rcall	.+4      	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 85c:	a9 f7       	brne	.-22     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 85e:	ea cf       	rjmp	.-44     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 860:	b4 e0       	ldi	r27, 0x04	; 4
 862:	a6 95       	lsr	r26
 864:	97 95       	ror	r25
 866:	87 95       	ror	r24
 868:	77 95       	ror	r23
 86a:	67 95       	ror	r22
 86c:	ba 95       	dec	r27
 86e:	c9 f7       	brne	.-14     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
 870:	00 97       	sbiw	r24, 0x00	; 0
 872:	61 05       	cpc	r22, r1
 874:	71 05       	cpc	r23, r1
 876:	08 95       	ret
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	0a 2e       	mov	r0, r26
 87e:	06 94       	lsr	r0
 880:	57 95       	ror	r21
 882:	47 95       	ror	r20
 884:	37 95       	ror	r19
 886:	27 95       	ror	r18
 888:	ba 95       	dec	r27
 88a:	c9 f7       	brne	.-14     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 88c:	62 0f       	add	r22, r18
 88e:	73 1f       	adc	r23, r19
 890:	84 1f       	adc	r24, r20
 892:	95 1f       	adc	r25, r21
 894:	a0 1d       	adc	r26, r0
 896:	08 95       	ret

00000898 <__prologue_saves__>:
 898:	2f 92       	push	r2
 89a:	3f 92       	push	r3
 89c:	4f 92       	push	r4
 89e:	5f 92       	push	r5
 8a0:	6f 92       	push	r6
 8a2:	7f 92       	push	r7
 8a4:	8f 92       	push	r8
 8a6:	9f 92       	push	r9
 8a8:	af 92       	push	r10
 8aa:	bf 92       	push	r11
 8ac:	cf 92       	push	r12
 8ae:	df 92       	push	r13
 8b0:	ef 92       	push	r14
 8b2:	ff 92       	push	r15
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	ca 1b       	sub	r28, r26
 8c2:	db 0b       	sbc	r29, r27
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	f8 94       	cli
 8c8:	de bf       	out	0x3e, r29	; 62
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	cd bf       	out	0x3d, r28	; 61
 8ce:	09 94       	ijmp

000008d0 <__epilogue_restores__>:
 8d0:	2a 88       	ldd	r2, Y+18	; 0x12
 8d2:	39 88       	ldd	r3, Y+17	; 0x11
 8d4:	48 88       	ldd	r4, Y+16	; 0x10
 8d6:	5f 84       	ldd	r5, Y+15	; 0x0f
 8d8:	6e 84       	ldd	r6, Y+14	; 0x0e
 8da:	7d 84       	ldd	r7, Y+13	; 0x0d
 8dc:	8c 84       	ldd	r8, Y+12	; 0x0c
 8de:	9b 84       	ldd	r9, Y+11	; 0x0b
 8e0:	aa 84       	ldd	r10, Y+10	; 0x0a
 8e2:	b9 84       	ldd	r11, Y+9	; 0x09
 8e4:	c8 84       	ldd	r12, Y+8	; 0x08
 8e6:	df 80       	ldd	r13, Y+7	; 0x07
 8e8:	ee 80       	ldd	r14, Y+6	; 0x06
 8ea:	fd 80       	ldd	r15, Y+5	; 0x05
 8ec:	0c 81       	ldd	r16, Y+4	; 0x04
 8ee:	1b 81       	ldd	r17, Y+3	; 0x03
 8f0:	aa 81       	ldd	r26, Y+2	; 0x02
 8f2:	b9 81       	ldd	r27, Y+1	; 0x01
 8f4:	ce 0f       	add	r28, r30
 8f6:	d1 1d       	adc	r29, r1
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	f8 94       	cli
 8fc:	de bf       	out	0x3e, r29	; 62
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	cd bf       	out	0x3d, r28	; 61
 902:	ed 01       	movw	r28, r26
 904:	08 95       	ret

00000906 <_exit>:
 906:	f8 94       	cli

00000908 <__stop_program>:
 908:	ff cf       	rjmp	.-2      	; 0x908 <__stop_program>

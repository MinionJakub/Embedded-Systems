
zadanie3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000654  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e7c  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001680  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  00002256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
uint8_t graycodes[] = {0, 1, 3, 2, 6, 7, 5, 4, 12, 
13, 15, 14, 10, 11, 9, 8, 24, 25, 27, 26, 30, 31, 
29, 28, 20, 21, 23, 22, 18, 19, 17, 16};

int main() {
    UCSR0B &= ~_BV(RXEN0) & ~_BV(TXEN0);
  96:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  9a:	87 7e       	andi	r24, 0xE7	; 231
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    LED_DDR = 0xff;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8a b9       	out	0x0a, r24	; 10
    LED_PORT = 0;
  a4:	1b b8       	out	0x0b, r1	; 11

    BUTTON_DDR &= ~(_BV(BUTTON) | _BV(BUTTON2) | _BV(BUTTON3));
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	84 b9       	out	0x04, r24	; 4
    BUTTON_PORT |= _BV(BUTTON) | _BV(BUTTON2) | _BV(BUTTON3);
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	87 60       	ori	r24, 0x07	; 7
  b0:	85 b9       	out	0x05, r24	; 5
    uint8_t counter = 0;
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	14 c0       	rjmp	.+40     	; 0xde <main+0x48>
    while(1){
        if(!(PINB&_BV(BUTTON))){
            counter = 0;
        }
        else if(!(PINB&_BV(BUTTON2))){
  b6:	19 99       	sbic	0x03, 1	; 3
  b8:	18 c0       	rjmp	.+48     	; 0xea <main+0x54>
            if(counter == 31) counter = 0;
  ba:	9f 31       	cpi	r25, 0x1F	; 31
  bc:	91 f0       	breq	.+36     	; 0xe2 <main+0x4c>
            else counter++;
  be:	9f 5f       	subi	r25, 0xFF	; 255
  c0:	e9 2f       	mov	r30, r25
  c2:	f0 e0       	ldi	r31, 0x00	; 0
        }
        else if(!(PINB&_BV(BUTTON3))){
            if(counter == 0) counter = 31;
            else counter--;
        }
        LED_PORT = graycodes[counter];
  c4:	e0 50       	subi	r30, 0x00	; 0
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	80 81       	ld	r24, Z
  ca:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	31 ee       	ldi	r19, 0xE1	; 225
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x46>
  dc:	00 00       	nop

    BUTTON_DDR &= ~(_BV(BUTTON) | _BV(BUTTON2) | _BV(BUTTON3));
    BUTTON_PORT |= _BV(BUTTON) | _BV(BUTTON2) | _BV(BUTTON3);
    uint8_t counter = 0;
    while(1){
        if(!(PINB&_BV(BUTTON))){
  de:	18 99       	sbic	0x03, 0	; 3
  e0:	ea cf       	rjmp	.-44     	; 0xb6 <main+0x20>
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f0 e0       	ldi	r31, 0x00	; 0
            counter = 0;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ed cf       	rjmp	.-38     	; 0xc4 <main+0x2e>
        }
        else if(!(PINB&_BV(BUTTON2))){
            if(counter == 31) counter = 0;
            else counter++;
        }
        else if(!(PINB&_BV(BUTTON3))){
  ea:	1a 99       	sbic	0x03, 2	; 3
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <main+0x5e>
            if(counter == 0) counter = 31;
  ee:	99 23       	and	r25, r25
  f0:	21 f0       	breq	.+8      	; 0xfa <main+0x64>
            else counter--;
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	e9 2f       	mov	r30, r25
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e5 cf       	rjmp	.-54     	; 0xc4 <main+0x2e>
  fa:	ef e1       	ldi	r30, 0x1F	; 31
  fc:	f0 e0       	ldi	r31, 0x00	; 0
        else if(!(PINB&_BV(BUTTON2))){
            if(counter == 31) counter = 0;
            else counter++;
        }
        else if(!(PINB&_BV(BUTTON3))){
            if(counter == 0) counter = 31;
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	e1 cf       	rjmp	.-62     	; 0xc4 <main+0x2e>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>

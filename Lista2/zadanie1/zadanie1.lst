
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  00000216  2**0
                  ALLOC
  3 .stab         00000708  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ea1  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
    else
        LED_PORT &= ~_BV(LED);
}

int main(){
    UCSR0B |= _BV(RXEN0) | _BV(TXEN0);
  90:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  94:	88 61       	ori	r24, 0x18	; 24
  96:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    BUTTON_DDR &= ~_BV(BUTTON);
  9a:	52 98       	cbi	0x0a, 2	; 10
    BUTTON_PORT |= _BV(BUTTON);
  9c:	5a 9a       	sbi	0x0b, 2	; 11

    LED_DDR  |= _BV(LED);
  9e:	25 9a       	sbi	0x04, 5	; 4
    uint8_t crossed_100 = 0;
    uint8_t place;
    uint8_t bit;
    uint8_t writer = 0;
    uint8_t reader = 0;
  a0:	70 e0       	ldi	r23, 0x00	; 0

    LED_DDR  |= _BV(LED);
    uint8_t crossed_100 = 0;
    uint8_t place;
    uint8_t bit;
    uint8_t writer = 0;
  a2:	30 e0       	ldi	r19, 0x00	; 0
    
    BUTTON_DDR &= ~_BV(BUTTON);
    BUTTON_PORT |= _BV(BUTTON);

    LED_DDR  |= _BV(LED);
    uint8_t crossed_100 = 0;
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	50 e0       	ldi	r21, 0x00	; 0
    uint8_t place;
    uint8_t bit;
    uint8_t writer = 0;
    uint8_t reader = 0;
    while(1){
        if(reader == 255)
  aa:	7f 3f       	cpi	r23, 0xFF	; 255
  ac:	d1 f1       	breq	.+116    	; 0x122 <main+0x92>
            reader = 0;
        if(writer == 255)
  ae:	3f 3f       	cpi	r19, 0xFF	; 255
  b0:	d9 f1       	breq	.+118    	; 0x128 <main+0x98>
            writer = 0;
        if(!crossed_100 && writer == 100)
  b2:	66 23       	and	r22, r22
  b4:	09 f4       	brne	.+2      	; 0xb8 <main+0x28>
  b6:	49 c0       	rjmp	.+146    	; 0x14a <main+0xba>
  b8:	83 2f       	mov	r24, r19
  ba:	86 95       	lsr	r24
  bc:	86 95       	lsr	r24
  be:	86 95       	lsr	r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	23 2f       	mov	r18, r19
  c4:	27 70       	andi	r18, 0x07	; 7
  c6:	a4 2f       	mov	r26, r20
  c8:	01 c0       	rjmp	.+2      	; 0xcc <main+0x3c>
  ca:	aa 0f       	add	r26, r26
  cc:	2a 95       	dec	r18
  ce:	ea f7       	brpl	.-6      	; 0xca <main+0x3a>
  d0:	2a 2f       	mov	r18, r26
  d2:	3f 5f       	subi	r19, 0xFF	; 255
        

        place = get_place(writer);
        bit = get_bit(writer);
        if(!(PIND&_BV(PD2))){
            cirular_buffer[place] |= _BV(bit);
  d4:	fc 01       	movw	r30, r24
  d6:	e0 50       	subi	r30, 0x00	; 0
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
            crossed_100 = 1;
        

        place = get_place(writer);
        bit = get_bit(writer);
        if(!(PIND&_BV(PD2))){
  da:	4a 99       	sbic	0x09, 2	; 9
  dc:	31 c0       	rjmp	.+98     	; 0x140 <main+0xb0>
            cirular_buffer[place] |= _BV(bit);
  de:	80 81       	ld	r24, Z
  e0:	28 2b       	or	r18, r24
  e2:	20 83       	st	Z, r18
        }
        else{
            cirular_buffer[place] &= ~_BV(bit);
        }
        writer++;
        if(crossed_100){
  e4:	66 23       	and	r22, r22
  e6:	a9 f0       	breq	.+42     	; 0x112 <main+0x82>
            place = get_place(reader);
            bit = get_bit(reader);
            light(cirular_buffer[place]&_BV(bit));
  e8:	e7 2f       	mov	r30, r23
  ea:	e6 95       	lsr	r30
  ec:	e6 95       	lsr	r30
  ee:	e6 95       	lsr	r30
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
static inline uint8_t get_bit(uint8_t value){
    return (value&7);
}

static inline void light(uint8_t value){
    if(value)
  f6:	87 2f       	mov	r24, r23
  f8:	87 70       	andi	r24, 0x07	; 7
  fa:	da 01       	movw	r26, r20
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x72>
  fe:	aa 0f       	add	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	8a 95       	dec	r24
 104:	e2 f7       	brpl	.-8      	; 0xfe <main+0x6e>
 106:	cd 01       	movw	r24, r26
 108:	90 81       	ld	r25, Z
 10a:	89 23       	and	r24, r25
 10c:	81 f1       	breq	.+96     	; 0x16e <main+0xde>
        LED_PORT |= _BV(LED);
 10e:	2d 9a       	sbi	0x05, 5	; 5
        writer++;
        if(crossed_100){
            place = get_place(reader);
            bit = get_bit(reader);
            light(cirular_buffer[place]&_BV(bit));
            reader++;
 110:	7f 5f       	subi	r23, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9c e9       	ldi	r25, 0x9C	; 156
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x86>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x8c>
 11c:	00 00       	nop
    uint8_t place;
    uint8_t bit;
    uint8_t writer = 0;
    uint8_t reader = 0;
    while(1){
        if(reader == 255)
 11e:	7f 3f       	cpi	r23, 0xFF	; 255
 120:	31 f6       	brne	.-116    	; 0xae <main+0x1e>
            reader = 0;
 122:	70 e0       	ldi	r23, 0x00	; 0
        if(writer == 255)
 124:	3f 3f       	cpi	r19, 0xFF	; 255
 126:	29 f6       	brne	.-118    	; 0xb2 <main+0x22>
            writer = 0;
        if(!crossed_100 && writer == 100)
 128:	31 e0       	ldi	r19, 0x01	; 1
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	61 11       	cpse	r22, r1
 132:	d0 cf       	rjmp	.-96     	; 0xd4 <main+0x44>
 134:	60 e0       	ldi	r22, 0x00	; 0
        

        place = get_place(writer);
        bit = get_bit(writer);
        if(!(PIND&_BV(PD2))){
            cirular_buffer[place] |= _BV(bit);
 136:	fc 01       	movw	r30, r24
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
            crossed_100 = 1;
        

        place = get_place(writer);
        bit = get_bit(writer);
        if(!(PIND&_BV(PD2))){
 13c:	4a 9b       	sbis	0x09, 2	; 9
 13e:	cf cf       	rjmp	.-98     	; 0xde <main+0x4e>
            cirular_buffer[place] |= _BV(bit);
        }
        else{
            cirular_buffer[place] &= ~_BV(bit);
 140:	20 95       	com	r18
 142:	80 81       	ld	r24, Z
 144:	28 23       	and	r18, r24
 146:	20 83       	st	Z, r18
 148:	cd cf       	rjmp	.-102    	; 0xe4 <main+0x54>
    while(1){
        if(reader == 255)
            reader = 0;
        if(writer == 255)
            writer = 0;
        if(!crossed_100 && writer == 100)
 14a:	34 36       	cpi	r19, 0x64	; 100
 14c:	91 f0       	breq	.+36     	; 0x172 <main+0xe2>
 14e:	83 2f       	mov	r24, r19
 150:	86 95       	lsr	r24
 152:	86 95       	lsr	r24
 154:	86 95       	lsr	r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	23 2f       	mov	r18, r19
 15a:	27 70       	andi	r18, 0x07	; 7
 15c:	b4 2f       	mov	r27, r20
 15e:	01 c0       	rjmp	.+2      	; 0x162 <main+0xd2>
 160:	bb 0f       	add	r27, r27
 162:	2a 95       	dec	r18
 164:	ea f7       	brpl	.-6      	; 0x160 <main+0xd0>
 166:	2b 2f       	mov	r18, r27
 168:	3f 5f       	subi	r19, 0xFF	; 255
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	e4 cf       	rjmp	.-56     	; 0x136 <main+0xa6>

static inline void light(uint8_t value){
    if(value)
        LED_PORT |= _BV(LED);
    else
        LED_PORT &= ~_BV(LED);
 16e:	2d 98       	cbi	0x05, 5	; 5
 170:	cf cf       	rjmp	.-98     	; 0x110 <main+0x80>
 172:	35 e6       	ldi	r19, 0x65	; 101
 174:	20 e1       	ldi	r18, 0x10	; 16
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	90 e0       	ldi	r25, 0x00	; 0
        if(reader == 255)
            reader = 0;
        if(writer == 255)
            writer = 0;
        if(!crossed_100 && writer == 100)
            crossed_100 = 1;
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	ab cf       	rjmp	.-170    	; 0xd4 <main+0x44>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>

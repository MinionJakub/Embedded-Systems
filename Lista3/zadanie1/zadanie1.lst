
zadanie1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000200  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000750  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ed3  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001897  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018a8  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001a  00000000  00000000  0000247e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	19 19       	sub	r17, r9
  6a:	19 19       	sub	r17, r9
  6c:	32 32       	cpi	r19, 0x22	; 34
  6e:	19 19       	sub	r17, r9
  70:	19 19       	sub	r17, r9
  72:	32 64       	ori	r19, 0x42	; 66

00000074 <notes>:
  74:	1a 1d 21 1d 1a 21 1d 21 23 21 1d 00 1d 21 23 21     ..!..!.!#!...!#!
  84:	1d 23 1a 1d 21 1d 1a 00 1a 1d 21 1d 1a 21 1d 21     .#..!.....!..!.!
  94:	23 21 1d 00 1d 21 23 21 1d 23 21 1d 27 23 21 00     #!...!#!.#!.'#!.

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61
  b0:	0e 94 67 00 	call	0xce	; 0xce <main>
  b4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <my_delay_us>:

#define BUZZ PB5
#define BUZZ_DDR DDRB
#define BUZZ_PORT PORTB

void my_delay_us(uint16_t value){
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <my_delay_us+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	25 e0       	ldi	r18, 0x05	; 5
  c0:	2a 95       	dec	r18
  c2:	f1 f7       	brne	.-4      	; 0xc0 <my_delay_us+0x4>
  c4:	00 00       	nop
    while(value){
        _delay_us(1);
        value--;
  c6:	01 97       	sbiw	r24, 0x01	; 1
#define BUZZ PB5
#define BUZZ_DDR DDRB
#define BUZZ_PORT PORTB

void my_delay_us(uint16_t value){
    while(value){
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	c9 f7       	brne	.-14     	; 0xbe <my_delay_us+0x2>
  cc:	08 95       	ret

000000ce <main>:
static const uint8_t length[] PROGMEM = {
    q,q,q,q,h,h,q,q,q,q,h,f
};

int main(){
    BUZZ_DDR |= _BV(BUZZ);
  ce:	25 9a       	sbi	0x04, 5	; 4
  d0:	04 e7       	ldi	r16, 0x74	; 116
  d2:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t value;
    uint16_t len;
    while(1){
        for(int8_t i = 0; i < 48; i++){
  d4:	f1 2c       	mov	r15, r1
            value = (uint16_t)pgm_read_byte(&notes[i]) * 10;
  d6:	f8 01       	movw	r30, r16
  d8:	c4 91       	lpm	r28, Z
  da:	fa e0       	ldi	r31, 0x0A	; 10
  dc:	cf 9f       	mul	r28, r31
  de:	e0 01       	movw	r28, r0
  e0:	11 24       	eor	r1, r1
            len = (uint16_t)pgm_read_byte(&length[i%12]) * 10;
  e2:	2f 2d       	mov	r18, r15
  e4:	9b e2       	ldi	r25, 0x2B	; 43
  e6:	29 02       	muls	r18, r25
  e8:	81 2d       	mov	r24, r1
  ea:	11 24       	eor	r1, r1
  ec:	85 95       	asr	r24
  ee:	f7 fc       	sbrc	r15, 7
  f0:	83 95       	inc	r24
  f2:	98 2f       	mov	r25, r24
  f4:	99 0f       	add	r25, r25
  f6:	89 0f       	add	r24, r25
  f8:	88 0f       	add	r24, r24
  fa:	88 0f       	add	r24, r24
  fc:	ef 2d       	mov	r30, r15
  fe:	e8 1b       	sub	r30, r24
 100:	0e 2e       	mov	r0, r30
 102:	00 0c       	add	r0, r0
 104:	ff 0b       	sbc	r31, r31
 106:	e8 59       	subi	r30, 0x98	; 152
 108:	ff 4f       	sbci	r31, 0xFF	; 255
 10a:	24 91       	lpm	r18, Z
 10c:	ea e0       	ldi	r30, 0x0A	; 10
 10e:	2e 9f       	mul	r18, r30
 110:	90 01       	movw	r18, r0
 112:	11 24       	eor	r1, r1
    }
}

static inline void TONE(uint16_t step, uint16_t delay){
    // uint16_t step2 = step;
    if(step == 0){
 114:	20 97       	sbiw	r28, 0x00	; 0
 116:	c9 f1       	breq	.+114    	; 0x18a <main+0xbc>
        BUZZ_PORT &= ~_BV(BUZZ);
        _delay_us(2*step);
        return;
    }
    for (uint16_t i = 0; i < (uint32_t)1000 * (delay) / (step) / 2; i++){
 118:	a8 ee       	ldi	r26, 0xE8	; 232
 11a:	b3 e0       	ldi	r27, 0x03	; 3
 11c:	0e 94 ef 00 	call	0x1de	; 0x1de <__umulhisi3>
 120:	4e 01       	movw	r8, r28
 122:	a1 2c       	mov	r10, r1
 124:	b1 2c       	mov	r11, r1
 126:	a5 01       	movw	r20, r10
 128:	94 01       	movw	r18, r8
 12a:	0e 94 cd 00 	call	0x19a	; 0x19a <__udivmodsi4>
 12e:	49 01       	movw	r8, r18
 130:	5a 01       	movw	r10, r20
 132:	b6 94       	lsr	r11
 134:	a7 94       	ror	r10
 136:	97 94       	ror	r9
 138:	87 94       	ror	r8
 13a:	81 14       	cp	r8, r1
 13c:	91 04       	cpc	r9, r1
 13e:	a1 04       	cpc	r10, r1
 140:	b1 04       	cpc	r11, r1
 142:	e1 f0       	breq	.+56     	; 0x17c <main+0xae>
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	50 e0       	ldi	r21, 0x00	; 0
        BUZZ_PORT |= _BV(BUZZ);
 148:	2d 9a       	sbi	0x05, 5	; 5
 14a:	ce 01       	movw	r24, r28
 14c:	f5 e0       	ldi	r31, 0x05	; 5
 14e:	fa 95       	dec	r31
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x80>
 152:	00 00       	nop
#define BUZZ_PORT PORTB

void my_delay_us(uint16_t value){
    while(value){
        _delay_us(1);
        value--;
 154:	01 97       	sbiw	r24, 0x01	; 1
#define BUZZ PB5
#define BUZZ_DDR DDRB
#define BUZZ_PORT PORTB

void my_delay_us(uint16_t value){
    while(value){
 156:	d1 f7       	brne	.-12     	; 0x14c <main+0x7e>
        return;
    }
    for (uint16_t i = 0; i < (uint32_t)1000 * (delay) / (step) / 2; i++){
        BUZZ_PORT |= _BV(BUZZ);
        my_delay_us(step);
        BUZZ_PORT &= ~_BV(BUZZ);
 158:	2d 98       	cbi	0x05, 5	; 5
 15a:	ce 01       	movw	r24, r28
 15c:	25 e0       	ldi	r18, 0x05	; 5
 15e:	2a 95       	dec	r18
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x90>
 162:	00 00       	nop
#define BUZZ_PORT PORTB

void my_delay_us(uint16_t value){
    while(value){
        _delay_us(1);
        value--;
 164:	01 97       	sbiw	r24, 0x01	; 1
#define BUZZ PB5
#define BUZZ_DDR DDRB
#define BUZZ_PORT PORTB

void my_delay_us(uint16_t value){
    while(value){
 166:	d1 f7       	brne	.-12     	; 0x15c <main+0x8e>
    if(step == 0){
        BUZZ_PORT &= ~_BV(BUZZ);
        _delay_us(2*step);
        return;
    }
    for (uint16_t i = 0; i < (uint32_t)1000 * (delay) / (step) / 2; i++){
 168:	4f 5f       	subi	r20, 0xFF	; 255
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	ca 01       	movw	r24, r20
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	88 15       	cp	r24, r8
 174:	99 05       	cpc	r25, r9
 176:	aa 05       	cpc	r26, r10
 178:	bb 05       	cpc	r27, r11
 17a:	30 f3       	brcs	.-52     	; 0x148 <main+0x7a>
 17c:	f3 94       	inc	r15
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
int main(){
    BUZZ_DDR |= _BV(BUZZ);
    uint16_t value;
    uint16_t len;
    while(1){
        for(int8_t i = 0; i < 48; i++){
 182:	80 e3       	ldi	r24, 0x30	; 48
 184:	f8 12       	cpse	r15, r24
 186:	a7 cf       	rjmp	.-178    	; 0xd6 <main+0x8>
 188:	a3 cf       	rjmp	.-186    	; 0xd0 <main+0x2>
}

static inline void TONE(uint16_t step, uint16_t delay){
    // uint16_t step2 = step;
    if(step == 0){
        BUZZ_PORT &= ~_BV(BUZZ);
 18a:	2d 98       	cbi	0x05, 5	; 5
 18c:	f3 94       	inc	r15
 18e:	0f 5f       	subi	r16, 0xFF	; 255
 190:	1f 4f       	sbci	r17, 0xFF	; 255
int main(){
    BUZZ_DDR |= _BV(BUZZ);
    uint16_t value;
    uint16_t len;
    while(1){
        for(int8_t i = 0; i < 48; i++){
 192:	80 e3       	ldi	r24, 0x30	; 48
 194:	f8 12       	cpse	r15, r24
 196:	9f cf       	rjmp	.-194    	; 0xd6 <main+0x8>
 198:	9b cf       	rjmp	.-202    	; 0xd0 <main+0x2>

0000019a <__udivmodsi4>:
 19a:	a1 e2       	ldi	r26, 0x21	; 33
 19c:	1a 2e       	mov	r1, r26
 19e:	aa 1b       	sub	r26, r26
 1a0:	bb 1b       	sub	r27, r27
 1a2:	fd 01       	movw	r30, r26
 1a4:	0d c0       	rjmp	.+26     	; 0x1c0 <__udivmodsi4_ep>

000001a6 <__udivmodsi4_loop>:
 1a6:	aa 1f       	adc	r26, r26
 1a8:	bb 1f       	adc	r27, r27
 1aa:	ee 1f       	adc	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	a2 17       	cp	r26, r18
 1b0:	b3 07       	cpc	r27, r19
 1b2:	e4 07       	cpc	r30, r20
 1b4:	f5 07       	cpc	r31, r21
 1b6:	20 f0       	brcs	.+8      	; 0x1c0 <__udivmodsi4_ep>
 1b8:	a2 1b       	sub	r26, r18
 1ba:	b3 0b       	sbc	r27, r19
 1bc:	e4 0b       	sbc	r30, r20
 1be:	f5 0b       	sbc	r31, r21

000001c0 <__udivmodsi4_ep>:
 1c0:	66 1f       	adc	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	88 1f       	adc	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	1a 94       	dec	r1
 1ca:	69 f7       	brne	.-38     	; 0x1a6 <__udivmodsi4_loop>
 1cc:	60 95       	com	r22
 1ce:	70 95       	com	r23
 1d0:	80 95       	com	r24
 1d2:	90 95       	com	r25
 1d4:	9b 01       	movw	r18, r22
 1d6:	ac 01       	movw	r20, r24
 1d8:	bd 01       	movw	r22, r26
 1da:	cf 01       	movw	r24, r30
 1dc:	08 95       	ret

000001de <__umulhisi3>:
 1de:	a2 9f       	mul	r26, r18
 1e0:	b0 01       	movw	r22, r0
 1e2:	b3 9f       	mul	r27, r19
 1e4:	c0 01       	movw	r24, r0
 1e6:	a3 9f       	mul	r26, r19
 1e8:	70 0d       	add	r23, r0
 1ea:	81 1d       	adc	r24, r1
 1ec:	11 24       	eor	r1, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	b2 9f       	mul	r27, r18
 1f2:	70 0d       	add	r23, r0
 1f4:	81 1d       	adc	r24, r1
 1f6:	11 24       	eor	r1, r1
 1f8:	91 1d       	adc	r25, r1
 1fa:	08 95       	ret

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>

   1               		.file	"port.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
 176               	.global	pxPortInitialiseStack
 178               	pxPortInitialiseStack:
 179               		.stabd	46,0,0
   1:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FreeRTOS V8.2.0 - Copyright (C) 2015 Real Time Engineers Ltd.
   3:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     All rights reserved
   4:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
   5:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
   7:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     This file is part of the FreeRTOS distribution.
   8:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
   9:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
  12:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  13:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	***************************************************************************
  14:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	***************************************************************************
  19:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  20:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     link: http://www.freertos.org/a00114.html
  24:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  25:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     ***************************************************************************
  26:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *                                                                       *
  27:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    platform software that is more than just the market leader, it     *
  30:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    is the industry's de facto standard.                               *
  31:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *                                                                       *
  32:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    tutorial book, reference manual, or both:                          *
  35:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****      *                                                                       *
  37:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     ***************************************************************************
  38:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  39:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	the FAQ page "My application does not run, what could be wrong?".  Have you
  41:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	defined configASSERT()?
  42:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  43:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	embedded software for free we request you assist our global community by
  45:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	participating in the support forum.
  46:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  47:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	be as productive as possible as early as possible.  Now you can receive
  49:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	Ltd, and the world's leading authority on the world's leading RTOS.
  51:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  52:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  56:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  59:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  63:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     engineered and independently SIL3 certified version for use in safety and
  65:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     mission critical applications that require provable dependability.
  66:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  67:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     1 tab == 4 spaces!
  68:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** */
  69:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  70:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
  71:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  72:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** Changes from V2.6.0
  73:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  74:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	+ AVR port - Replaced the inb() and outb() functions with direct memory
  75:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	  access.  This allows the port to be built with the 20050414 build of
  76:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	  WinAVR.
  77:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** */
  78:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  79:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include <stdlib.h>
  80:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include <avr/interrupt.h>
  81:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  82:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include "FreeRTOS.h"
  83:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #include "task.h"
  84:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  85:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------
  86:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Implementation of functions defined in portable.h for the AVR port.
  87:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  *----------------------------------------------------------*/
  88:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  89:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* Start tasks with interrupts enables. */
  90:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portFLAGS_INT_ENABLED					( ( StackType_t ) 0x80 )
  91:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  92:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* Hardware constants for timer 1. */
  93:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portCLEAR_COUNTER_ON_MATCH              ( ( unsigned char ) _BV(WGM12) )
  94:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portPRESCALE_64                         ( ( unsigned char ) (_BV(CS11) | _BV(CS10)) )
  95:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portCLOCK_PRESCALER						( ( uint32_t ) 64 )
  96:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portCOMPARE_MATCH_A_INTERRUPT_ENABLE    ( ( unsigned char ) _BV(OCIE1A) )
  97:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
  98:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
  99:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* We require the address of the pxCurrentTCB variable, but don't want to know
 100:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** any details of its type. */
 101:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** typedef void TCB_t;
 102:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** extern volatile TCB_t * volatile pxCurrentTCB;
 103:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 104:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 105:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 106:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
 107:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Macro to save all the general purpose registers, the save the stack pointer
 108:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * into the TCB.  
 109:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * 
 110:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * The first thing we do is save the flags then disable interrupts.  This is to 
 111:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * guard our stack against having a context switch interrupt after we have already 
 112:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * pushed the registers onto the stack - causing the 32 registers to be on the 
 113:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * stack twice. 
 114:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * 
 115:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * r1 is set to zero as the compiler expects it to be thus, however some
 116:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * of the math routines make use of R1. 
 117:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * 
 118:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * The interrupts will have been disabled during the call to portSAVE_CONTEXT()
 119:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * so we need not worry about reading/writing to the stack pointer. 
 120:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 121:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 122:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portSAVE_CONTEXT()									\
 123:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile (	"push	r0						\n\t"	\
 124:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"in		r0, __SREG__			\n\t"	\
 125:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"cli							\n\t"	\
 126:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r0						\n\t"	\
 127:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r1						\n\t"	\
 128:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"clr	r1						\n\t"	\
 129:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r2						\n\t"	\
 130:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r3						\n\t"	\
 131:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r4						\n\t"	\
 132:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r5						\n\t"	\
 133:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r6						\n\t"	\
 134:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r7						\n\t"	\
 135:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r8						\n\t"	\
 136:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r9						\n\t"	\
 137:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r10						\n\t"	\
 138:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r11						\n\t"	\
 139:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r12						\n\t"	\
 140:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r13						\n\t"	\
 141:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r14						\n\t"	\
 142:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r15						\n\t"	\
 143:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r16						\n\t"	\
 144:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r17						\n\t"	\
 145:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r18						\n\t"	\
 146:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r19						\n\t"	\
 147:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r20						\n\t"	\
 148:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r21						\n\t"	\
 149:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r22						\n\t"	\
 150:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r23						\n\t"	\
 151:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r24						\n\t"	\
 152:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r25						\n\t"	\
 153:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r26						\n\t"	\
 154:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r27						\n\t"	\
 155:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r28						\n\t"	\
 156:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r29						\n\t"	\
 157:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r30						\n\t"	\
 158:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"push	r31						\n\t"	\
 159:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"lds	r26, pxCurrentTCB		\n\t"	\
 160:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 161:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"in		r0, 0x3d				\n\t"	\
 162:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"st		x+, r0					\n\t"	\
 163:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"in		r0, 0x3e				\n\t"	\
 164:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"st		x+, r0					\n\t"	\
 165:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 				);
 166:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 167:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
 168:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Opposite to portSAVE_CONTEXT().  Interrupts will have been disabled during
 169:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * the context save so we can write to the stack pointer. 
 170:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 171:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 172:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #define portRESTORE_CONTEXT()								\
 173:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile (	"lds	r26, pxCurrentTCB		\n\t"	\
 174:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"lds	r27, pxCurrentTCB + 1	\n\t"	\
 175:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"ld		r28, x+					\n\t"	\
 176:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"out	__SP_L__, r28			\n\t"	\
 177:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"ld		r29, x+					\n\t"	\
 178:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"out	__SP_H__, r29			\n\t"	\
 179:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r31						\n\t"	\
 180:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r30						\n\t"	\
 181:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r29						\n\t"	\
 182:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r28						\n\t"	\
 183:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r27						\n\t"	\
 184:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r26						\n\t"	\
 185:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r25						\n\t"	\
 186:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r24						\n\t"	\
 187:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r23						\n\t"	\
 188:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r22						\n\t"	\
 189:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r21						\n\t"	\
 190:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r20						\n\t"	\
 191:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r19						\n\t"	\
 192:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r18						\n\t"	\
 193:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r17						\n\t"	\
 194:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r16						\n\t"	\
 195:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r15						\n\t"	\
 196:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r14						\n\t"	\
 197:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r13						\n\t"	\
 198:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r12						\n\t"	\
 199:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r11						\n\t"	\
 200:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r10						\n\t"	\
 201:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r9						\n\t"	\
 202:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r8						\n\t"	\
 203:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r7						\n\t"	\
 204:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r6						\n\t"	\
 205:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r5						\n\t"	\
 206:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r4						\n\t"	\
 207:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r3						\n\t"	\
 208:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r2						\n\t"	\
 209:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r1						\n\t"	\
 210:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r0						\n\t"	\
 211:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"out	__SREG__, r0			\n\t"	\
 212:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 					"pop	r0						\n\t"	\
 213:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 				);
 214:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 215:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 216:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 217:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 218:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Perform hardware setup to enable ticks from timer 1, compare match A.
 219:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 220:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** static void prvSetupTimerInterrupt( void );
 221:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 222:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 223:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /* 
 224:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * See header file for description. 
 225:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 226:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 227:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 181               	.LM0:
 182               	.LFBB1:
 183               	/* prologue: function */
 184               	/* frame size = 0 */
 185               	/* stack size = 0 */
 186               	.L__stack_usage = 0
 228:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** uint16_t usAddress;
 229:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 230:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Place a few bytes of known values on the bottom of the stack. 
 231:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	This is just useful for debugging. */
 232:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 233:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = 0x11;
 188               	.LM1:
 189 0000 31E1      		ldi r19,lo8(17)
 190 0002 FC01      		movw r30,r24
 191 0004 3083      		st Z,r19
 234:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 235:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = 0x22;
 193               	.LM2:
 194 0006 3197      		sbiw r30,1
 195 0008 22E2      		ldi r18,lo8(34)
 196 000a 2083      		st Z,r18
 236:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 237:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = 0x33;
 198               	.LM3:
 199 000c 3197      		sbiw r30,1
 200 000e A3E3      		ldi r26,lo8(51)
 201 0010 A083      		st Z,r26
 238:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 239:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 240:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Simulate how the stack would look after a call to vPortYield() generated by 
 241:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	the compiler. */
 242:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 243:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */
 244:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 245:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* The start of the task code will be popped off the stack last, so place
 246:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	it on first. */
 247:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress = ( uint16_t ) pxCode;
 248:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 203               	.LM4:
 204 0012 3197      		sbiw r30,1
 205 0014 6083      		st Z,r22
 249:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 250:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 251:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress >>= 8;
 252:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 207               	.LM5:
 208 0016 3197      		sbiw r30,1
 209 0018 7083      		st Z,r23
 253:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 254:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 255:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
 256:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT places the flags on the stack immediately after r0
 257:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	to ensure the interrupts get disabled as soon as possible, and so ensuring
 258:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	the stack use is minimal should a context switch interrupt occur. */
 259:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
 211               	.LM6:
 212 001a 3197      		sbiw r30,1
 213 001c 1082      		st Z,__zero_reg__
 260:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 261:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = portFLAGS_INT_ENABLED;
 215               	.LM7:
 216 001e 3197      		sbiw r30,1
 217 0020 60E8      		ldi r22,lo8(-128)
 218 0022 6083      		st Z,r22
 262:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 263:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 264:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 265:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Now the remaining registers.   The compiler expects R1 to be 0. */
 266:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
 220               	.LM8:
 221 0024 3197      		sbiw r30,1
 222 0026 1082      		st Z,__zero_reg__
 267:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 268:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
 224               	.LM9:
 225 0028 3197      		sbiw r30,1
 226 002a 62E0      		ldi r22,lo8(2)
 227 002c 6083      		st Z,r22
 269:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 270:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
 229               	.LM10:
 230 002e 3197      		sbiw r30,1
 231 0030 63E0      		ldi r22,lo8(3)
 232 0032 6083      		st Z,r22
 271:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 272:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
 234               	.LM11:
 235 0034 3197      		sbiw r30,1
 236 0036 64E0      		ldi r22,lo8(4)
 237 0038 6083      		st Z,r22
 273:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 274:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
 239               	.LM12:
 240 003a 3197      		sbiw r30,1
 241 003c 65E0      		ldi r22,lo8(5)
 242 003e 6083      		st Z,r22
 275:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 276:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
 244               	.LM13:
 245 0040 3197      		sbiw r30,1
 246 0042 66E0      		ldi r22,lo8(6)
 247 0044 6083      		st Z,r22
 277:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 278:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
 249               	.LM14:
 250 0046 3197      		sbiw r30,1
 251 0048 67E0      		ldi r22,lo8(7)
 252 004a 6083      		st Z,r22
 279:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 280:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
 254               	.LM15:
 255 004c 3197      		sbiw r30,1
 256 004e 68E0      		ldi r22,lo8(8)
 257 0050 6083      		st Z,r22
 281:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 282:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
 259               	.LM16:
 260 0052 3197      		sbiw r30,1
 261 0054 69E0      		ldi r22,lo8(9)
 262 0056 6083      		st Z,r22
 283:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 284:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
 264               	.LM17:
 265 0058 3197      		sbiw r30,1
 266 005a 60E1      		ldi r22,lo8(16)
 267 005c 6083      		st Z,r22
 285:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 286:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
 269               	.LM18:
 270 005e 3197      		sbiw r30,1
 271 0060 3083      		st Z,r19
 287:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 288:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
 273               	.LM19:
 274 0062 3197      		sbiw r30,1
 275 0064 32E1      		ldi r19,lo8(18)
 276 0066 3083      		st Z,r19
 289:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 290:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
 278               	.LM20:
 279 0068 3197      		sbiw r30,1
 280 006a 33E1      		ldi r19,lo8(19)
 281 006c 3083      		st Z,r19
 291:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 292:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
 283               	.LM21:
 284 006e 3197      		sbiw r30,1
 285 0070 34E1      		ldi r19,lo8(20)
 286 0072 3083      		st Z,r19
 293:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 294:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
 288               	.LM22:
 289 0074 3197      		sbiw r30,1
 290 0076 35E1      		ldi r19,lo8(21)
 291 0078 3083      		st Z,r19
 295:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 296:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
 293               	.LM23:
 294 007a 3197      		sbiw r30,1
 295 007c 36E1      		ldi r19,lo8(22)
 296 007e 3083      		st Z,r19
 297:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 298:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
 298               	.LM24:
 299 0080 3197      		sbiw r30,1
 300 0082 37E1      		ldi r19,lo8(23)
 301 0084 3083      		st Z,r19
 299:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 300:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
 303               	.LM25:
 304 0086 3197      		sbiw r30,1
 305 0088 38E1      		ldi r19,lo8(24)
 306 008a 3083      		st Z,r19
 301:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 302:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
 308               	.LM26:
 309 008c 3197      		sbiw r30,1
 310 008e 39E1      		ldi r19,lo8(25)
 311 0090 3083      		st Z,r19
 303:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 304:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
 313               	.LM27:
 314 0092 3197      		sbiw r30,1
 315 0094 30E2      		ldi r19,lo8(32)
 316 0096 3083      		st Z,r19
 305:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 306:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
 318               	.LM28:
 319 0098 3197      		sbiw r30,1
 320 009a 31E2      		ldi r19,lo8(33)
 321 009c 3083      		st Z,r19
 307:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 308:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
 323               	.LM29:
 324 009e 3197      		sbiw r30,1
 325 00a0 2083      		st Z,r18
 309:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 310:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
 327               	.LM30:
 328 00a2 3197      		sbiw r30,1
 329 00a4 23E2      		ldi r18,lo8(35)
 330 00a6 2083      		st Z,r18
 311:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 312:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 313:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Place the parameter on the stack in the expected location. */
 314:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress = ( uint16_t ) pvParameters;
 315:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 332               	.LM31:
 333 00a8 3197      		sbiw r30,1
 334 00aa 4083      		st Z,r20
 316:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 317:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 318:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	usAddress >>= 8;
 319:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
 336               	.LM32:
 337 00ac 3197      		sbiw r30,1
 338 00ae 5083      		st Z,r21
 320:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 321:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 322:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
 340               	.LM33:
 341 00b0 3197      		sbiw r30,1
 342 00b2 26E2      		ldi r18,lo8(38)
 343 00b4 2083      		st Z,r18
 323:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 324:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
 345               	.LM34:
 346 00b6 3197      		sbiw r30,1
 347 00b8 27E2      		ldi r18,lo8(39)
 348 00ba 2083      		st Z,r18
 325:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 326:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
 350               	.LM35:
 351 00bc 3197      		sbiw r30,1
 352 00be 28E2      		ldi r18,lo8(40)
 353 00c0 2083      		st Z,r18
 327:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 328:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
 355               	.LM36:
 356 00c2 3197      		sbiw r30,1
 357 00c4 29E2      		ldi r18,lo8(41)
 358 00c6 2083      		st Z,r18
 329:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 330:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
 360               	.LM37:
 361 00c8 3197      		sbiw r30,1
 362 00ca 20E3      		ldi r18,lo8(48)
 363 00cc 2083      		st Z,r18
 331:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 332:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
 365               	.LM38:
 366 00ce 3197      		sbiw r30,1
 367 00d0 21E3      		ldi r18,lo8(49)
 368 00d2 2083      		st Z,r18
 333:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	pxTopOfStack--;
 334:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 335:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/*lint +e950 +e611 +e923 */
 336:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 337:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	return pxTopOfStack;
 338:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 370               	.LM39:
 371 00d4 8697      		sbiw r24,38
 372 00d6 0895      		ret
 374               	.Lscope1:
 376               		.stabd	78,0,0
 378               	.global	xPortStartScheduler
 380               	xPortStartScheduler:
 381               		.stabd	46,0,0
 339:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 340:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 341:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** BaseType_t xPortStartScheduler( void )
 342:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 383               	.LM40:
 384               	.LFBB2:
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 0 */
 388               	.L__stack_usage = 0
 389               	.LBB4:
 390               	.LBB5:
 343:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Setup the hardware to generate the tick. */
 344:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	prvSetupTimerInterrupt();
 345:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 346:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Restore the context of the first task that is going to run. */
 347:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 348:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 349:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Simulate a function call end as generated by the compiler.  We will now
 350:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	jump to the start of the task the context of which we have just restored. */
 351:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 352:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 353:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Should not get here. */
 354:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	return pdTRUE;
 355:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 356:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 357:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 358:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortEndScheduler( void )
 359:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 360:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* It is unlikely that the AVR port will get stopped.  If required simply
 361:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	disable the tick interrupt here. */
 362:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 363:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 364:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 365:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 366:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Manual context switch.  The first thing we do is save the registers so we
 367:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * can use a naked attribute.
 368:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 369:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYield( void ) __attribute__ ( ( naked ) );
 370:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYield( void )
 371:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 372:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 373:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	vTaskSwitchContext();
 374:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 375:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 376:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 377:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 378:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 379:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 380:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 381:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Context switch function used by the tick.  This must be identical to 
 382:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * vPortYield() from the call to vTaskSwitchContext() onwards.  The only
 383:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * difference from vPortYield() is the tick count is incremented as the
 384:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * call comes from the tick ISR.
 385:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 386:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
 387:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** void vPortYieldFromTick( void )
 388:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 389:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 390:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 391:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	{
 392:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		vTaskSwitchContext();
 393:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	}
 394:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 395:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 396:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	asm volatile ( "ret" );
 397:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 398:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 399:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 400:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*
 401:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  * Setup timer 1 compare match A to generate a tick interrupt.
 402:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****  */
 403:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** static void prvSetupTimerInterrupt( void )
 404:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** {
 405:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** uint32_t ulCompareMatch;
 406:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** unsigned char ucLowByte;
 407:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 408:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
 409:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	selected for the configCPU_CLOCK_HZ clock. */
 410:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 411:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
 412:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 413:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* We only have 16 bits so have to scale to get our required tick rate. */
 414:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ulCompareMatch /= portCLOCK_PRESCALER;
 415:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 416:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Adjust for correct value. */
 417:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ulCompareMatch -= ( uint32_t ) 1;
 418:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 419:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Setup compare match value for compare match A.  Interrupts are disabled 
 420:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	before this is called so we need not worry here. */
 421:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** OCR1A = ulCompareMatch;
 392               	.LM41:
 393 00d8 89EF      		ldi r24,lo8(-7)
 394 00da 90E0      		ldi r25,0
 395 00dc 9093 8900 		sts 136+1,r25
 396 00e0 8093 8800 		sts 136,r24
 422:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 423:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Setup clock source and compare match behaviour. */
 424:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	TCCR1A &= ~(_BV(WGM11) | _BV(WGM10));;
 398               	.LM42:
 399 00e4 E0E8      		ldi r30,lo8(-128)
 400 00e6 F0E0      		ldi r31,0
 401 00e8 8081      		ld r24,Z
 402 00ea 8C7F      		andi r24,lo8(-4)
 403 00ec 8083      		st Z,r24
 425:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
 426:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	TCCR1B = ucLowByte;
 405               	.LM43:
 406 00ee 8BE0      		ldi r24,lo8(11)
 407 00f0 8093 8100 		sts 129,r24
 427:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 428:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* Enable the interrupt - this is okay as interrupt are currently globally
 429:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	disabled. */
 430:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ucLowByte = TIMSK1;
 409               	.LM44:
 410 00f4 EFE6      		ldi r30,lo8(111)
 411 00f6 F0E0      		ldi r31,0
 412 00f8 8081      		ld r24,Z
 431:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
 414               	.LM45:
 415 00fa 8260      		ori r24,lo8(2)
 432:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	TIMSK1 = ucLowByte;
 417               	.LM46:
 418 00fc 8083      		st Z,r24
 419               	.LBE5:
 420               	.LBE4:
 347:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 422               	.LM47:
 423               	/* #APP */
 424               	 ;  347 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 425 00fe A091 0000 		lds	r26, pxCurrentTCB		
 426 0102 B091 0000 		lds	r27, pxCurrentTCB + 1	
 427 0106 CD91      		ld		r28, x+					
 428 0108 CDBF      		out	__SP_L__, r28			
 429 010a DD91      		ld		r29, x+					
 430 010c DEBF      		out	__SP_H__, r29			
 431 010e FF91      		pop	r31						
 432 0110 EF91      		pop	r30						
 433 0112 DF91      		pop	r29						
 434 0114 CF91      		pop	r28						
 435 0116 BF91      		pop	r27						
 436 0118 AF91      		pop	r26						
 437 011a 9F91      		pop	r25						
 438 011c 8F91      		pop	r24						
 439 011e 7F91      		pop	r23						
 440 0120 6F91      		pop	r22						
 441 0122 5F91      		pop	r21						
 442 0124 4F91      		pop	r20						
 443 0126 3F91      		pop	r19						
 444 0128 2F91      		pop	r18						
 445 012a 1F91      		pop	r17						
 446 012c 0F91      		pop	r16						
 447 012e FF90      		pop	r15						
 448 0130 EF90      		pop	r14						
 449 0132 DF90      		pop	r13						
 450 0134 CF90      		pop	r12						
 451 0136 BF90      		pop	r11						
 452 0138 AF90      		pop	r10						
 453 013a 9F90      		pop	r9						
 454 013c 8F90      		pop	r8						
 455 013e 7F90      		pop	r7						
 456 0140 6F90      		pop	r6						
 457 0142 5F90      		pop	r5						
 458 0144 4F90      		pop	r4						
 459 0146 3F90      		pop	r3						
 460 0148 2F90      		pop	r2						
 461 014a 1F90      		pop	r1						
 462 014c 0F90      		pop	r0						
 463 014e 0FBE      		out	__SREG__, r0			
 464 0150 0F90      		pop	r0						
 465               		
 466               	 ;  0 "" 2
 351:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 468               	.LM48:
 469               	 ;  351 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 470 0152 0895      		ret
 471               	 ;  0 "" 2
 355:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 473               	.LM49:
 474               	/* #NOAPP */
 475 0154 81E0      		ldi r24,lo8(1)
 476 0156 0895      		ret
 478               	.Lscope2:
 480               		.stabd	78,0,0
 482               	.global	vPortEndScheduler
 484               	vPortEndScheduler:
 485               		.stabd	46,0,0
 359:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/* It is unlikely that the AVR port will get stopped.  If required simply
 487               	.LM50:
 488               	.LFBB3:
 489               	/* prologue: function */
 490               	/* frame size = 0 */
 491               	/* stack size = 0 */
 492               	.L__stack_usage = 0
 493 0158 0895      		ret
 495               	.Lscope3:
 497               		.stabd	78,0,0
 499               	.global	vPortYield
 501               	vPortYield:
 502               		.stabd	46,0,0
 371:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 504               	.LM51:
 505               	.LFBB4:
 506               	/* prologue: naked */
 507               	/* frame size = 0 */
 508               	/* stack size = 0 */
 509               	.L__stack_usage = 0
 372:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	vTaskSwitchContext();
 511               	.LM52:
 512               	/* #APP */
 513               	 ;  372 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 514 015a 0F92      		push	r0						
 515 015c 0FB6      		in		r0, __SREG__			
 516 015e F894      		cli							
 517 0160 0F92      		push	r0						
 518 0162 1F92      		push	r1						
 519 0164 1124      		clr	r1						
 520 0166 2F92      		push	r2						
 521 0168 3F92      		push	r3						
 522 016a 4F92      		push	r4						
 523 016c 5F92      		push	r5						
 524 016e 6F92      		push	r6						
 525 0170 7F92      		push	r7						
 526 0172 8F92      		push	r8						
 527 0174 9F92      		push	r9						
 528 0176 AF92      		push	r10						
 529 0178 BF92      		push	r11						
 530 017a CF92      		push	r12						
 531 017c DF92      		push	r13						
 532 017e EF92      		push	r14						
 533 0180 FF92      		push	r15						
 534 0182 0F93      		push	r16						
 535 0184 1F93      		push	r17						
 536 0186 2F93      		push	r18						
 537 0188 3F93      		push	r19						
 538 018a 4F93      		push	r20						
 539 018c 5F93      		push	r21						
 540 018e 6F93      		push	r22						
 541 0190 7F93      		push	r23						
 542 0192 8F93      		push	r24						
 543 0194 9F93      		push	r25						
 544 0196 AF93      		push	r26						
 545 0198 BF93      		push	r27						
 546 019a CF93      		push	r28						
 547 019c DF93      		push	r29						
 548 019e EF93      		push	r30						
 549 01a0 FF93      		push	r31						
 550 01a2 A091 0000 		lds	r26, pxCurrentTCB		
 551 01a6 B091 0000 		lds	r27, pxCurrentTCB + 1	
 552 01aa 0DB6      		in		r0, 0x3d				
 553 01ac 0D92      		st		x+, r0					
 554 01ae 0EB6      		in		r0, 0x3e				
 555 01b0 0D92      		st		x+, r0					
 556               		
 557               	 ;  0 "" 2
 373:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portRESTORE_CONTEXT();
 559               	.LM53:
 560               	/* #NOAPP */
 561 01b2 0E94 0000 		call vTaskSwitchContext
 374:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 563               	.LM54:
 564               	/* #APP */
 565               	 ;  374 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 566 01b6 A091 0000 		lds	r26, pxCurrentTCB		
 567 01ba B091 0000 		lds	r27, pxCurrentTCB + 1	
 568 01be CD91      		ld		r28, x+					
 569 01c0 CDBF      		out	__SP_L__, r28			
 570 01c2 DD91      		ld		r29, x+					
 571 01c4 DEBF      		out	__SP_H__, r29			
 572 01c6 FF91      		pop	r31						
 573 01c8 EF91      		pop	r30						
 574 01ca DF91      		pop	r29						
 575 01cc CF91      		pop	r28						
 576 01ce BF91      		pop	r27						
 577 01d0 AF91      		pop	r26						
 578 01d2 9F91      		pop	r25						
 579 01d4 8F91      		pop	r24						
 580 01d6 7F91      		pop	r23						
 581 01d8 6F91      		pop	r22						
 582 01da 5F91      		pop	r21						
 583 01dc 4F91      		pop	r20						
 584 01de 3F91      		pop	r19						
 585 01e0 2F91      		pop	r18						
 586 01e2 1F91      		pop	r17						
 587 01e4 0F91      		pop	r16						
 588 01e6 FF90      		pop	r15						
 589 01e8 EF90      		pop	r14						
 590 01ea DF90      		pop	r13						
 591 01ec CF90      		pop	r12						
 592 01ee BF90      		pop	r11						
 593 01f0 AF90      		pop	r10						
 594 01f2 9F90      		pop	r9						
 595 01f4 8F90      		pop	r8						
 596 01f6 7F90      		pop	r7						
 597 01f8 6F90      		pop	r6						
 598 01fa 5F90      		pop	r5						
 599 01fc 4F90      		pop	r4						
 600 01fe 3F90      		pop	r3						
 601 0200 2F90      		pop	r2						
 602 0202 1F90      		pop	r1						
 603 0204 0F90      		pop	r0						
 604 0206 0FBE      		out	__SREG__, r0			
 605 0208 0F90      		pop	r0						
 606               		
 607               	 ;  0 "" 2
 376:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 609               	.LM55:
 610               	 ;  376 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 611 020a 0895      		ret
 612               	 ;  0 "" 2
 613               	/* epilogue start */
 377:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 615               	.LM56:
 616               	/* #NOAPP */
 618               	.Lscope4:
 620               		.stabd	78,0,0
 622               	.global	vPortYieldFromTick
 624               	vPortYieldFromTick:
 625               		.stabd	46,0,0
 388:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	portSAVE_CONTEXT();
 627               	.LM57:
 628               	.LFBB5:
 629               	/* prologue: naked */
 630               	/* frame size = 0 */
 631               	/* stack size = 0 */
 632               	.L__stack_usage = 0
 389:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	if( xTaskIncrementTick() != pdFALSE )
 634               	.LM58:
 635               	/* #APP */
 636               	 ;  389 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 637 020c 0F92      		push	r0						
 638 020e 0FB6      		in		r0, __SREG__			
 639 0210 F894      		cli							
 640 0212 0F92      		push	r0						
 641 0214 1F92      		push	r1						
 642 0216 1124      		clr	r1						
 643 0218 2F92      		push	r2						
 644 021a 3F92      		push	r3						
 645 021c 4F92      		push	r4						
 646 021e 5F92      		push	r5						
 647 0220 6F92      		push	r6						
 648 0222 7F92      		push	r7						
 649 0224 8F92      		push	r8						
 650 0226 9F92      		push	r9						
 651 0228 AF92      		push	r10						
 652 022a BF92      		push	r11						
 653 022c CF92      		push	r12						
 654 022e DF92      		push	r13						
 655 0230 EF92      		push	r14						
 656 0232 FF92      		push	r15						
 657 0234 0F93      		push	r16						
 658 0236 1F93      		push	r17						
 659 0238 2F93      		push	r18						
 660 023a 3F93      		push	r19						
 661 023c 4F93      		push	r20						
 662 023e 5F93      		push	r21						
 663 0240 6F93      		push	r22						
 664 0242 7F93      		push	r23						
 665 0244 8F93      		push	r24						
 666 0246 9F93      		push	r25						
 667 0248 AF93      		push	r26						
 668 024a BF93      		push	r27						
 669 024c CF93      		push	r28						
 670 024e DF93      		push	r29						
 671 0250 EF93      		push	r30						
 672 0252 FF93      		push	r31						
 673 0254 A091 0000 		lds	r26, pxCurrentTCB		
 674 0258 B091 0000 		lds	r27, pxCurrentTCB + 1	
 675 025c 0DB6      		in		r0, 0x3d				
 676 025e 0D92      		st		x+, r0					
 677 0260 0EB6      		in		r0, 0x3e				
 678 0262 0D92      		st		x+, r0					
 679               		
 680               	 ;  0 "" 2
 390:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	{
 682               	.LM59:
 683               	/* #NOAPP */
 684 0264 0E94 0000 		call xTaskIncrementTick
 685 0268 8111      		cpse r24,__zero_reg__
 392:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	}
 687               	.LM60:
 688 026a 0E94 0000 		call vTaskSwitchContext
 689               	.L6:
 394:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 691               	.LM61:
 692               	/* #APP */
 693               	 ;  394 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 694 026e A091 0000 		lds	r26, pxCurrentTCB		
 695 0272 B091 0000 		lds	r27, pxCurrentTCB + 1	
 696 0276 CD91      		ld		r28, x+					
 697 0278 CDBF      		out	__SP_L__, r28			
 698 027a DD91      		ld		r29, x+					
 699 027c DEBF      		out	__SP_H__, r29			
 700 027e FF91      		pop	r31						
 701 0280 EF91      		pop	r30						
 702 0282 DF91      		pop	r29						
 703 0284 CF91      		pop	r28						
 704 0286 BF91      		pop	r27						
 705 0288 AF91      		pop	r26						
 706 028a 9F91      		pop	r25						
 707 028c 8F91      		pop	r24						
 708 028e 7F91      		pop	r23						
 709 0290 6F91      		pop	r22						
 710 0292 5F91      		pop	r21						
 711 0294 4F91      		pop	r20						
 712 0296 3F91      		pop	r19						
 713 0298 2F91      		pop	r18						
 714 029a 1F91      		pop	r17						
 715 029c 0F91      		pop	r16						
 716 029e FF90      		pop	r15						
 717 02a0 EF90      		pop	r14						
 718 02a2 DF90      		pop	r13						
 719 02a4 CF90      		pop	r12						
 720 02a6 BF90      		pop	r11						
 721 02a8 AF90      		pop	r10						
 722 02aa 9F90      		pop	r9						
 723 02ac 8F90      		pop	r8						
 724 02ae 7F90      		pop	r7						
 725 02b0 6F90      		pop	r6						
 726 02b2 5F90      		pop	r5						
 727 02b4 4F90      		pop	r4						
 728 02b6 3F90      		pop	r3						
 729 02b8 2F90      		pop	r2						
 730 02ba 1F90      		pop	r1						
 731 02bc 0F90      		pop	r0						
 732 02be 0FBE      		out	__SREG__, r0			
 733 02c0 0F90      		pop	r0						
 734               		
 735               	 ;  0 "" 2
 396:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 737               	.LM62:
 738               	 ;  396 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 739 02c2 0895      		ret
 740               	 ;  0 "" 2
 741               	/* epilogue start */
 397:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 743               	.LM63:
 744               	/* #NOAPP */
 746               	.Lscope5:
 748               		.stabd	78,0,0
 750               	.global	__vector_11
 752               	__vector_11:
 753               		.stabd	46,0,0
 433:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** }
 434:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** /*-----------------------------------------------------------*/
 435:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 436:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** #if configUSE_PREEMPTION == 1
 437:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 
 438:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	/*
 439:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 * Tick ISR for preemptive scheduler.  We can use a naked attribute as
 440:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 * the context is saved at the start of vPortYieldFromTick().  The tick
 441:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 * count is incremented after the context is saved.
 442:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	 */
 443:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
 444:FreeRTOS/Source/portable/GCC/ATMega328/port.c ****     void TIMER1_COMPA_vect( void )
 445:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	{
 755               	.LM64:
 756               	.LFBB6:
 757               	/* prologue: naked */
 758               	/* frame size = 0 */
 759               	/* stack size = 0 */
 760               	.L__stack_usage = 0
 446:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		vPortYieldFromTick();
 762               	.LM65:
 763 02c4 0E94 0000 		call vPortYieldFromTick
 447:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 		asm volatile ( "reti" );
 765               	.LM66:
 766               	/* #APP */
 767               	 ;  447 "FreeRTOS/Source/portable/GCC/ATMega328/port.c" 1
 768 02c8 1895      		reti
 769               	 ;  0 "" 2
 770               	/* epilogue start */
 448:FreeRTOS/Source/portable/GCC/ATMega328/port.c **** 	}
 772               	.LM67:
 773               	/* #NOAPP */
 775               	.Lscope6:
 777               		.stabd	78,0,0
 779               	.Letext0:
 780               		.ident	"GCC: (GNU) 5.4.0"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccG3iAUe.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccG3iAUe.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccG3iAUe.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccG3iAUe.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccG3iAUe.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccG3iAUe.s:178    .text:0000000000000000 pxPortInitialiseStack
     /tmp/ccG3iAUe.s:380    .text:00000000000000d8 xPortStartScheduler
     /tmp/ccG3iAUe.s:484    .text:0000000000000158 vPortEndScheduler
     /tmp/ccG3iAUe.s:501    .text:000000000000015a vPortYield
     /tmp/ccG3iAUe.s:624    .text:000000000000020c vPortYieldFromTick
     /tmp/ccG3iAUe.s:752    .text:00000000000002c4 __vector_11

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick

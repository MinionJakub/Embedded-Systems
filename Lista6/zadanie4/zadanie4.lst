
zadanie4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010a  0080010a  0000025e  2**0
                  ALLOC
  3 .stab         00000888  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ede  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000025ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  9e:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <timer_init>:
    0,                          //8
    E                           //9
};

void timer_init(){
    TCCR2A = _BV(WGM21);
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = _BV(CS22) | _BV(CS21) |_BV(CS20);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    OCR2A = 195;
  b2:	83 ec       	ldi	r24, 0xC3	; 195
  b4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    TIMSK2 |= _BV(OCIE2A);
  b8:	e0 e7       	ldi	r30, 0x70	; 112
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <__vector_7>:
}

volatile uint8_t timer = 0;
volatile uint8_t index = 0;

ISR(TIMER2_COMPA_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
    if(++timer >= 100){
  d0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <timer>
  d4:	8f 5f       	subi	r24, 0xFF	; 255
  d6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <timer>
  da:	84 36       	cpi	r24, 0x64	; 100
  dc:	58 f0       	brcs	.+22     	; 0xf4 <__vector_7+0x30>
        timer = 0;
  de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <timer>
        if(++index >= 10) index = 0;
  e2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	10 f0       	brcs	.+4      	; 0xf4 <__vector_7+0x30>
  f0:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
    }
}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_17>:

ISR(SPI_STC_vect){}
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <spi_init>:

void spi_init(){
    //ustaw  MOSI, SCK, i ~SS jako wyjścia
    SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_LA) | _BV(SPI_OE);
 114:	84 b1       	in	r24, 0x04	; 4
 116:	8e 62       	ori	r24, 0x2E	; 46
 118:	84 b9       	out	0x04, r24	; 4
    SPI_PORT &= ~_BV(SPI_OE);
 11a:	2a 98       	cbi	0x05, 2	; 5
    //ustaw SPI na tryb master oraz na 250 kHz
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR1) ;//| _BV(SPIE);
 11c:	82 e5       	ldi	r24, 0x52	; 82
 11e:	8c bd       	out	0x2c, r24	; 44
 120:	08 95       	ret

00000122 <load_digit>:
}

void load_digit(uint8_t digit){
    SPI_PORT |= _BV(SPI_LA);
 122:	29 9a       	sbi	0x05, 1	; 5
    SPDR = digit|DP;
 124:	80 68       	ori	r24, 0x80	; 128
 126:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & _BV(SPIF)));// sleep_mode();
 128:	0d b4       	in	r0, 0x2d	; 45
 12a:	07 fe       	sbrs	r0, 7
 12c:	fd cf       	rjmp	.-6      	; 0x128 <load_digit+0x6>
    SPSR |= _BV(SPIF);
 12e:	8d b5       	in	r24, 0x2d	; 45
 130:	80 68       	ori	r24, 0x80	; 128
 132:	8d bd       	out	0x2d, r24	; 45
    SPI_PORT &= ~_BV(SPI_LA);
 134:	29 98       	cbi	0x05, 1	; 5
 136:	08 95       	ret

00000138 <main>:
    0,                          //8
    E                           //9
};

void timer_init(){
    TCCR2A = _BV(WGM21);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    TCCR2B = _BV(CS22) | _BV(CS21) |_BV(CS20);
 13e:	87 e0       	ldi	r24, 0x07	; 7
 140:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
    OCR2A = 195;
 144:	83 ec       	ldi	r24, 0xC3	; 195
 146:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    TIMSK2 |= _BV(OCIE2A);
 14a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>

ISR(SPI_STC_vect){}

void spi_init(){
    //ustaw  MOSI, SCK, i ~SS jako wyjścia
    SPI_DDR |= _BV(SPI_MOSI) | _BV(SPI_SCK) | _BV(SPI_LA) | _BV(SPI_OE);
 154:	84 b1       	in	r24, 0x04	; 4
 156:	8e 62       	ori	r24, 0x2E	; 46
 158:	84 b9       	out	0x04, r24	; 4
    SPI_PORT &= ~_BV(SPI_OE);
 15a:	2a 98       	cbi	0x05, 2	; 5
    //ustaw SPI na tryb master oraz na 250 kHz
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR1) ;//| _BV(SPIE);
 15c:	82 e5       	ldi	r24, 0x52	; 82
 15e:	8c bd       	out	0x2c, r24	; 44


int main(){
    timer_init();
    spi_init();
    sei();
 160:	78 94       	sei
    set_sleep_mode(SLEEP_MODE_IDLE);
 162:	83 b7       	in	r24, 0x33	; 51
 164:	81 7f       	andi	r24, 0xF1	; 241
 166:	83 bf       	out	0x33, r24	; 51
    load_digit(~numbers[index]);
 168:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e0 50       	subi	r30, 0x00	; 0
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	80 95       	com	r24
    //ustaw SPI na tryb master oraz na 250 kHz
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR1) ;//| _BV(SPIE);
}

void load_digit(uint8_t digit){
    SPI_PORT |= _BV(SPI_LA);
 176:	29 9a       	sbi	0x05, 1	; 5
    SPDR = digit|DP;
 178:	80 68       	ori	r24, 0x80	; 128
 17a:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & _BV(SPIF)));// sleep_mode();
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x44>
    SPSR |= _BV(SPIF);
 182:	8d b5       	in	r24, 0x2d	; 45
 184:	80 68       	ori	r24, 0x80	; 128
 186:	8d bd       	out	0x2d, r24	; 45
    SPI_PORT &= ~_BV(SPI_LA);
 188:	29 98       	cbi	0x05, 1	; 5
    spi_init();
    sei();
    set_sleep_mode(SLEEP_MODE_IDLE);
    load_digit(~numbers[index]);
    while(1){
        load_digit(~numbers[index]);
 18a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	80 81       	ld	r24, Z
 196:	80 95       	com	r24
    //ustaw SPI na tryb master oraz na 250 kHz
    SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR1) ;//| _BV(SPIE);
}

void load_digit(uint8_t digit){
    SPI_PORT |= _BV(SPI_LA);
 198:	29 9a       	sbi	0x05, 1	; 5
    SPDR = digit|DP;
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & _BV(SPIF)));// sleep_mode();
 19e:	0d b4       	in	r0, 0x2d	; 45
 1a0:	07 fe       	sbrs	r0, 7
 1a2:	fd cf       	rjmp	.-6      	; 0x19e <main+0x66>
    SPSR |= _BV(SPIF);
 1a4:	8d b5       	in	r24, 0x2d	; 45
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	8d bd       	out	0x2d, r24	; 45
    SPI_PORT &= ~_BV(SPI_LA);
 1aa:	29 98       	cbi	0x05, 1	; 5
    sei();
    set_sleep_mode(SLEEP_MODE_IDLE);
    load_digit(~numbers[index]);
    while(1){
        load_digit(~numbers[index]);
        sleep_mode();
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	83 bf       	out	0x33, r24	; 51
 1b2:	88 95       	sleep
 1b4:	83 b7       	in	r24, 0x33	; 51
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	83 bf       	out	0x33, r24	; 51
    }
 1ba:	e7 cf       	rjmp	.-50     	; 0x18a <main+0x52>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
